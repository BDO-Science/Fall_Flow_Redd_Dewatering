reddCount <- 347
countDate <- "August 13, 2023"
updatedReddInfoDate <- "September 6, 2023"
fallreddCount<- 1000
scenarios <- c("Alt.1b", "Alt.3c", "Alt.3d", "Alt.3f", "Alt.3g")
#KWK daily flows url.  This url will have to be updated.
library(rvest)
kwk_webpage <- read_html('https://www.cbr.washington.edu/sacramento/tmp/riverdaily_1694103865_328.html')
kes_webpage <- read_html('https://www.cbr.washington.edu/sacramento/tmp/riverdaily_1694103884_126.html')
#show_extra = TRUE
library(tinytex)
library(data.table)
library(plyr)
library(lubridate)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(tidyverse)
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read in redd data, converting flow to a numeric and date from character to date value
redds <- read.csv("Redds.csv", colClasses=c('character', 'character', 'num.with.commas'))
redds$Estimated.Date.of.Emergence <- as.Date(redds$Estimated.Date.of.Emergence, "%m/%d/%Y")
#redds$Estimated.Date.of.Emergence <- as.Date(redds$Estimated.Date.of.Emergence,  "%Y-%m-%d")
reddsAll <- redds
#Read in KES flow data, converting flow to a numeric and date from character to date value
kesFlow <- read.csv("kesFlow.csv")
kesFlow <- read.csv("kesFlow.csv", colClasses=c(rep('character', length(kesFlow))))
kesFlow$Date <- as.Date(kesFlow$Date, "%m/%d/%Y")
#kesFlow$Date <- as.Date(kesFlow$Date, "%Y-%m-%d")
kesFlow <- kesFlow %>%
as_tibble %>%
select(Date, scenarios) %>%
as.data.frame()
realFlow <- read.csv("realtimeKES.csv")
realFlow$Date <- as.Date(realFlow$Date, "%m/%d/%Y")
actualDate <- max(realFlow$Date)
#import fall-run spawn info
Spawn_info <- read.csv('spawn.csv')
Spawn_info$Date <- as.Date(Spawn_info$Date, format = '%m/%d/%Y')
Spawn_info <- Spawn_info %>% mutate(Emerg_Date = as.Date(Date + Avg_emerg)) #calculate emergence date
#import fall-run model
fall_model <- readRDS('fall_model.rds')
#`r if(show_extra){
#print("this will only print when show.text is TRUE")
#str(redds)
#str(kesFlow)
#str(realFlow)}`
library(rvest)
library(dplyr)
library(lubridate)
#list all table objects on webpage and print tbls to look for the proper table
kwk_tbls <- html_nodes(kwk_webpage, 'table')
kwk_tbls
#the proper table appears to be 6th object on the tbls list so input that into the code
kwk_flows <- kwk_webpage %>% html_nodes("table") %>% .[6] %>% html_table(fill = TRUE)
#convert to a dataframe and set the first row as the column headings
kwk_flows <- as.data.frame(kwk_flows)
#colnames(kwk_flows) <- kwk_flows[1, ]
colnames(kwk_flows) <- c("Project", "Date", "KWK")
kwk_flows <- kwk_flows[-1,]
kwk_flows$Date <- as.Date(kwk_flows$Date, "%Y-%m-%d")
kwk_flows <- kwk_flows %>%
select(Date, KWK) %>%
filter(Date >= as.Date("2023-08-01", "%Y-%m-%d"))
#list all table objects on webpage and print tbls to look for the proper table
kes_tbls <- html_nodes(kes_webpage, 'table')
kes_tbls
#the proper table appears to be 6th object on the tbls list so input that into the code
kes_flows <- kes_webpage %>% html_nodes("table") %>% .[6] %>% html_table(fill = TRUE)
#convert to a dataframe and set the first row as the column headings
kes_flows <- as.data.frame(kes_flows)
colnames(kes_flows) <- kes_flows[1, ]
kes_flows <- kes_flows %>%
select(Project, contains("Date"), contains("Outflow"))
colnames(kes_flows) <- c("Project", "Date", "KES")
kes_flows <- kes_flows[-1,]
kes_flows$Date <- as.Date(kes_flows$Date, "%Y-%m-%d")
kes_flows <- kes_flows %>%
select(Date, KES) %>%
filter(Date >= as.Date("2023-08-01", "%Y-%m-%d"))
#import actual Keswick flows from USGS
#library(dataRetrieval)
#start_date <- as.Date('2023-08-01')
#end_date <- Sys.Date()
#kes_flow <- readNWISdata(sites = '11370500', parameterCd = '00060', startDate = start_date, endDate = end_date)
# Thousand Acre Feet
kesFlowReal <- merge(kesFlow, kes_flows, by = "Date", all.x = TRUE, all.y = TRUE)
for(a in 1:(length(kesFlow)-1)){
kesFlowReal[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,6), "cfs")] <- NA
kesFlowReal[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,6), "taf")] <- NA
}
for(a in 1:(length(kesFlow)-1)){
for(r in 1: nrow(kesFlowReal)){
if(is.na(kesFlowReal$KES[r])){
kesFlowReal[r, paste0("A", substr(names(kesFlow)[a + 1], 4,6), "cfs")] <- as.numeric(kesFlowReal[r, paste0("Alt", substr(names(kesFlow)[a + 1], 4,6))])
kesFlowReal[r, paste0("A", substr(names(kesFlow)[a + 1], 4,6), "taf")] <- (as.numeric(kesFlowReal[r, paste0("Alt", substr(names(kesFlow)[a + 1], 4,6))])*1.983)/1000
} else{
kesFlowReal[r, paste0("A", substr(names(kesFlow)[a + 1], 4,6), "cfs")] <- as.numeric(kesFlowReal$KES[r])
kesFlowReal[r, paste0("A", substr(names(kesFlow)[a + 1], 4,6), "taf")] <- (as.numeric(kesFlowReal$KES[r])*1.983)/1000
}
}
}
septTAF <- subset(kesFlowReal, months(kesFlowReal$Date) == "September")
octTAF <- subset(kesFlowReal, months(kesFlowReal$Date) == "October")
# September Flow Average
septKesFlow <- subset (kesFlow, kesFlow$Date < '2023-10-01' & kesFlow$Date >= '2023-9-01')
octKesFlow <- subset (kesFlow, kesFlow$Date >= '2023-10-01' & kesFlow$Date < '2023-11-01')
#estimate fall-run redds dewatered
#transform kesFlowReal dataframe for model
redd_model <- kesFlowReal %>%
gather(key = Scenarios, value = Spawn_Flows, contains('cfs')) %>%
select(Date, Scenarios, Spawn_Flows) %>%
mutate(Boards = if_else(Date < as.Date('2023-11-01'), 'in', 'out')) %>%
mutate(Spawn_Flows = as.numeric(Spawn_Flows))
#Join the spawning information and add the minimum flow each emergence date will be subjected to
redd_model <- redd_model %>% left_join(Spawn_info, by = 'Date') %>% group_by(Scenarios) %>%
mutate(Dewater = sapply(Emerg_Date, function(edate) {
if (!is.na(edate)) {
min(Spawn_Flows[Date <= edate], na.rm = TRUE)
} else {
NA
}
})) %>%
ungroup() %>% na.omit() %>% group_by(Date) %>% mutate(Redds = fallreddCount * Per_spawn) %>% ungroup()
#apply model
pred <- predict.lm(fall_model, newdata = redd_model, type = 'response')
redd_model <- cbind(redd_model, pred)
redd_model <- pmax(redd_model) #rounds negative predictions up to 0
redd_model <- redd_model %>% mutate(pred = if_else(Dewater >= Spawn_Flows, 0, pred)) #converts equal flows to 0
summary <- redd_model %>% mutate(Redds_lost = pred * Per_spawn) %>% group_by(Scenarios) %>%
summarize(Redds_lost = round((sum(Redds_lost)*100), 1)) %>%
rename('Fall-run dewatered (%)' = 'Redds_lost')
table2 <- setDT(as.data.frame(t(summary)), keep.rownames = TRUE, check.names = TRUE)
names(table2) <- table2 %>% slice(1) %>% unlist()
table2 <- table2 %>% slice(-1)
# Estimated number of redds dewatered
for(a in 1:(length(kesFlow)-1)){
redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))] <- NA
}
redds <- subset(redds, redds$Status == "OK" | redds$Status == "DEWATERED")
for(r in 1:nrow(redds)){ #loop over redds
for(f in 1:nrow(kesFlow)){ #loop over KES flow
for(a in 1:(length(kesFlow)-1)){ #loop over alternatives
if(kesFlow$Date[f] == redds$Estimated.Date.of.Emergence[r]){ #if dates match
if(kesFlow[f, paste0("Alt", substr(names(kesFlow)[a + 1], 4,6))] <= redds$ACTUAL.or.ESTIMATED..DEWATER.FLOW[r]){ #If KES flow is < or = redd dewatering flow, 1 (dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))] <- 1
} else{ #If KES flow is greater than redd dewatering flow, mark 0 (not dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))] <- redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))]
} #ends else
}
} #ends if date is the same
} #end looping over KES flow dataframe
} #end looping over redds dataframe
#Based on the `r countDate` redd count:
# Estimated number of redds dewatered with a 100cfs buffer
for(a in 1:(length(kesFlow)-1)){
redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6), "Buffer")] <- NA
}
for(r in 1:nrow(redds)){ #loop over redds
for(f in 1:nrow(kesFlow)){ #loop over KES flow
for(a in 1:(length(kesFlow)-1)){ #loop over alternatives
if(kesFlow$Date[f] == redds$Estimated.Date.of.Emergence[r]){ #if dates match
if(as.numeric(kesFlow[f, paste0("Alt", substr(names(kesFlow)[a + 1], 4,6))]) <= redds$ACTUAL.or.ESTIMATED..DEWATER.FLOW[r] + 250){ #If KES flow is < or = redd dewatering flow, 1 (dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6), "Buffer")] <- 1
} else{ #If KES flow is greater than redd dewatering flow, mark 0 (not dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6), "Buffer")] <- redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))]
} #ends else
}
} #ends if date is the same
} #end looping over KES flow dataframe
} #end looping over redds dataframe
#Based on the `r countDate` redd count:
Metric <- c("Avg Sept Flow (cfs)", "Avg Oct Flow (cfs)", "Sept-Feb Total Volume (TAF)", "Aug-Oct Total Volume (TAF)", "Winter-run Redds dewatered", "Winter-run Percent Lost (based on current count)", "Winter-run Percent Lost (based on expansion of 0.7)", "Winter-run Percent Lost (based on expansion of 0.3)", "Winter-run Redds Dewatered (w/ 250 cfs buffer)", "Winter-run Percent Lost (w/ 250 cfs buffer)")
table <- data.frame(Metric)
d <- rep(NA, length(kesFlow)-1)
dflist = vector("list", length(kesFlow)-1) # creating an empty list
dfnames <- rep(NA, length(kesFlow)-1)
for(a in 1:(length(kesFlow)-1)){
d[a] = paste0("Alt", substr(names(kesFlow)[a + 1], 4,6))
dfnames[a] = paste0("Alt", substr(names(kesFlow)[a + 1], 4,6))
names(dflist) = dfnames # naming the list
#table values
avg_sept_flow <- round(mean(as.numeric(septKesFlow[, paste0("Alt", substr(names(kesFlow)[a + 1], 4,6))]), na.rm = TRUE), 0)
avg_oct_flow <- round(mean(as.numeric(octKesFlow[, paste0("Alt", substr(names(kesFlow)[a + 1], 4,6))]), na.rm = TRUE), 0)
total_volume_sf <- round((sum(as.numeric(kesFlow[kesFlow$Date >= "2023-09-01" & kesFlow$Date < "2024-03-01" , names(kesFlow)[a + 1]]))*1.983)/1000, 0)
total_volume_ao <- round((sum(as.numeric(kesFlow[kesFlow$Date >= "2023-08-01" & kesFlow$Date < "2023-11-01" , names(kesFlow)[a + 1]]))*1.983)/1000, 0)
wr_dewatered <- sum(redds[ ,paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))], na.rm = TRUE)
wr_pct_lost <-  round((sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))], na.rm = TRUE)/reddCount*100), 1)
wr_pct_lost_70 <- round((sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))], na.rm = TRUE)/(reddCount*1.7)*100), 1)
wr_pct_lost_30 <- round((sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6))], na.rm = TRUE)/(reddCount*1.3)*100), 1)
wr_dewatered_250 <- sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6), "Buffer")], na.rm = TRUE)
wr_pct_lost_250 <- round((sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,6), "Buffer")], na.rm = TRUE)/reddCount*100), 1)
dflist[[a]] <- as.character(c(avg_sept_flow, avg_oct_flow, total_volume_sf, total_volume_ao,
wr_dewatered, wr_pct_lost, wr_pct_lost_70, wr_pct_lost_30,
wr_dewatered_250, wr_pct_lost_250))
table <- cbind(table, dflist[a])
}
table <- rbind(table, setNames(table2, names(table)))
knitr::kable(table)
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
#ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
ymax <- round_any(max(realFlow$KES_Flow), 250, f = ceiling)
todays_date <- as.Date(format(max(kwk_flows$Date), '%Y-%m-%d'))
mid <- as.Date('2023-09-01') + floor((todays_date - as.Date('2023-09-01'))/2)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "Emerged"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "Dewatered"
} else {
reddsTable$cols[r] <- "Remaining"
}
}
}
reddsTable <- reddsTable %>% rename('Date' = 'Estimated.Date.of.Emergence', 'Flow' = 'ACTUAL.or.ESTIMATED..DEWATER.FLOW')
flows <- kesFlowReal %>%
gather(key = Alts, value = Flow, contains('cfs')) %>%
mutate(Alts = str_extract(Alts, "\\d([a-zA-Z])")) %>%
mutate(Flow = as.numeric(Flow)) %>%
filter(Date >= todays_date)
real_flows <- kes_flows %>% left_join(kwk_flows, by = 'Date') %>%
gather(key = 'Gauge', value = 'Flow', KES, KWK) %>% mutate(Flow = as.numeric(Flow))
ggplot() + geom_line(flows, mapping = aes(x = Date, y = Flow, color = Alts), size = 0.75) +
geom_line(real_flows, mapping = aes(x = Date, y = Flow, linetype = Gauge), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 2.5, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'), fontface = 'bold', alpha = 0.75) + #facet_wrap(~Alternates) +
ylim(ymin, ymax) +
xlim(min(as.Date('2023-09-01')), (max(reddsTable$Date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
legend.title = element_text(size = 9)) +
scale_fill_manual(labels = c('Remaining', 'Emerged', 'Dewatered'), values = c('grey', 'lightblue', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date('2023-09-01'), xmax = max(todays_date),
ymin = 4000, ymax = 10000, fill = 'darkgrey', color = 'black', alpha = 0.3, linetype = 'dotted') +
annotate(geom = 'text', x = (mid + 1), y = 10300, size = 3, fontface = 'italic', label = 'Real-time Flows') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 9350, size = 2.25, label = 'KES') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 7750, size = 2.25, label = 'KWK')
#text(x=rep(max(kesFlow$Date)+3, 5),
#    y=c(min(kesFlow$Alt1), min(kesFlow$Alt2),
#       min(kesFlow$Alt3), min(kesFlow$Alt4), min(kesFlow$Alt5)),
#  pos=4, labels=c('red line', 'yellow line', 'orange line', 'green line', 'blue line'))
#data.frame(date = unique(redds$Estimated.Date.of.Emergence), )
kes_flows
kwk_flows
real_flows <- kes_flows %>% left_join(kwk_flows, by = 'Date')
real_flows
real_flows <- kes_flows %>% left_join(kwk_flows, by = 'Date') %>%
gather(key = 'Gauge', value = 'Flow', KES, KWK) %>% mutate(Flow = as.numeric(Flow))
real_flows
ggplot() + geom_line(flows, mapping = aes(x = Date, y = Flow, color = Alts), size = 0.75) +
geom_line(real_flows, mapping = aes(x = Date, y = Flow, linetype = Gauge), size = 0.75)
ggplot() + geom_line(flows, mapping = aes(x = Date, y = Flow, color = Alts), size = 0.75) +
geom_line(real_flows, mapping = aes(x = Date, y = Flow, linetype = Gauge), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 2.5, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'), fontface = 'bold', alpha = 0.75)
ggplot() + geom_line(flows, mapping = aes(x = Date, y = Flow, color = Alts), size = 0.75) +
geom_line(real_flows, mapping = aes(x = Date, y = Flow, linetype = Gauge), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 2.5, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'), fontface = 'bold', alpha = 0.75) + #facet_wrap(~Alternates) +
ylim(ymin, ymax) +
xlim(min(as.Date('2023-09-01')), (max(reddsTable$Date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
legend.title = element_text(size = 9)) +
scale_fill_manual(labels = c('Remaining', 'Emerged', 'Dewatered'), values = c('grey', 'lightblue', 'darkorange'))
ggplot() + geom_line(flows, mapping = aes(x = Date, y = Flow, color = Alts), size = 0.75) +
geom_line(real_flows, mapping = aes(x = Date, y = Flow, linetype = Gauge), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 2.5, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'), fontface = 'bold', alpha = 0.75) + #facet_wrap(~Alternates) +
ylim(ymin, ymax) +
xlim(min(as.Date('2023-09-01')), (max(reddsTable$Date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
legend.title = element_text(size = 9)) +
scale_fill_manual(labels = c('Remaining', 'Emerged', 'Dewatered'), values = c('grey', 'lightblue', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date('2023-09-01'), xmax = max(todays_date),
ymin = 4000, ymax = 10000, fill = 'darkgrey', color = 'black', alpha = 0.3, linetype = 'dotted')
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
#ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
ymax <- round_any(max(realFlow$KES_Flow), 250, f = ceiling)
todays_date <- as.Date(format(max(kwk_flows$Date), '%Y-%m-%d'))
mid <- as.Date('2023-09-01') + floor((todays_date - as.Date('2023-09-01'))/2)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "Emerged"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "Dewatered"
} else {
reddsTable$cols[r] <- "Remaining"
}
}
}
reddsTable <- reddsTable %>% rename('Date' = 'Estimated.Date.of.Emergence', 'Flow' = 'ACTUAL.or.ESTIMATED..DEWATER.FLOW')
flows <- kesFlowReal %>%
gather(key = Alts, value = Flow, contains('cfs')) %>%
mutate(Alts = str_extract(Alts, "\\d([a-zA-Z])")) %>%
mutate(Flow = as.numeric(Flow)) %>%
filter(Date >= todays_date)
real_flows <- kes_flows %>% left_join(kwk_flows, by = 'Date') %>%
gather(key = 'Gauge', value = 'Flow', KES, KWK) %>% mutate(Flow = as.numeric(Flow))
ggplot() + geom_line(flows, mapping = aes(x = Date, y = Flow, color = Alts), size = 0.75) +
geom_line(real_flows, mapping = aes(x = Date, y = Flow, linetype = Gauge), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 2.5, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'), fontface = 'bold', alpha = 0.75) + #facet_wrap(~Alternates) +
ylim(ymin, ymax) +
xlim(min(as.Date('2023-09-01')), (max(reddsTable$Date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
legend.title = element_text(size = 9)) +
scale_fill_manual(labels = c('Remaining', 'Emerged', 'Dewatered'), values = c('grey', 'lightblue', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date('2023-09-01'), xmax = max(todays_date),
ymin = 4000, ymax = 10000, fill = 'darkgrey', color = 'black', alpha = 0.3, linetype = 'dotted') +
annotate(geom = 'text', x = (mid + 1), y = 10300, size = 3, fontface = 'italic', label = 'Real-time Flows') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 9350, size = 2.25, label = 'KWK') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 7750, size = 2.25, label = 'KES')
#text(x=rep(max(kesFlow$Date)+3, 5),
#    y=c(min(kesFlow$Alt1), min(kesFlow$Alt2),
#       min(kesFlow$Alt3), min(kesFlow$Alt4), min(kesFlow$Alt5)),
#  pos=4, labels=c('red line', 'yellow line', 'orange line', 'green line', 'blue line'))
#data.frame(date = unique(redds$Estimated.Date.of.Emergence), )
#loading libraries and pulling in relevant data from excel files
library(tinytex)
library(data.table)
library(plyr)
library(lubridate)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(tidyverse)
library(readxl)
library(zoo)
#set desired scenarios for later filtering
scenarios <- c("Alt.1c", "Alt.2e", "Alt.3m", "Alt.3r", "Alt.3s")
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read in redd data from shallow winter redd monitoring
redd_files <- list.files('External_data/ShallowRedds/', pattern = "\\.xlsx$", full.names = TRUE) #list all excel files
MaxReddFile <- max(redd_files)
sheetShallow <- data.frame(excel_sheets(MaxReddFile)) %>%
rename('name' = 1) %>%
filter(grepl('SHALLOW', name, ignore.case = TRUE))
redds <- read_excel(MaxReddFile,  sheet = sheetShallow[1,1],
range = cell_cols(c('A:I')))
redds <- redds %>% na.omit() %>% select(3,4,6,9) %>%
rename('Born.on.Date' = 1, 'Estimated.Date.of.Emergence' = 2, 'ACTUAL.or.ESTIMATED..DEWATER.FLOW' = 4) %>%
mutate_at(1:2, as.Date)#minor cleaning
reddsAll <- redds
#Read in most recent flow scenario data, cleaning up datasheet, etc.
Files <- list.files('External_data/FlowScen/', pattern = "xlsx$")
MaxFile <- max(Files)
kesFlow <- read_excel(paste0('External_data/FlowScen/',MaxFile),
sheet = 'KES Flow all', skip = 1, col_names = TRUE) %>%
slice(1:(n()-26)) %>% select(-c(2,28,29)) %>%
mutate(Date = as.Date(as.numeric(Date), origin = "1899-12-30")) %>%
mutate_at(-1, as.numeric)
names <- colnames(kesFlow) #pull colnames for reformating
pattern <- "Alt\\s*(\\d+[a-z]?)(?:\\s*\\([^)]+\\))?" # Define a pattern to match the common part you want to keep
new_column_names <- gsub(pattern, "Alt.\\1", names) # Extract and format the desired column names
new_column_names <- gsub("-rice comp$", "", new_column_names)
colnames(kesFlow) <- new_column_names #set reformated names to column names
kesFlow <- kesFlow %>% select(Date, all_of(scenarios)) #selects only scenarios your interested in
#import fall-run spawn info
spawn <- read.csv('Model_inputs/spawn_timing.csv') %>%
mutate(Date = as.Date(Day, origin = as.Date('2023-01-01'))) %>% #will need to adjust origin for 2024
rename('EmergDays' = 'EmergDate') %>% filter(Run == 'Fall')
#import gard look up table
fall_lookup <- read.csv('Model_inputs/model_dewater_flows.csv') %>%
rename('GardDewater' = 'Dewater', 'GardSpawn' = 'Spawn_Flows') %>% filter(Run == 'Fall')
#read in Redd Count data and date from most recent file
count_pattern <- 'To date, unexpanded redd count' #set pattern for count cell to look for
date_pattern <- 'Through' #set pattern for date cell to look for
sheetCount <- data.frame(excel_sheets(MaxReddFile)) %>%
rename('name' = 1) %>%
filter(grepl('REPORTING', name, ignore.case = TRUE))
#for Count data
Count <- read_excel(MaxReddFile,  sheet = sheetCount[1,1])
reddCount <- round(as.numeric(Count[[(which(Count[, 2] == 'To date, unexpanded redd count') + 1), 2]]),0)
countDate <- format(as.Date(as.numeric(Count[[(which(Count[, 1] == 'Through') + 1), 1]]),
origin = "1899-12-30"), "%B %d, %Y")
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{8}).*", "\\1", MaxReddFile), format = "%Y%m%d"), "%B %d, %Y")
flow_date <- as.Date('2023-10-16')
yr <- 2023 #year of analysis
yr_exp <- 3 #this year's expected expansion number based on the linear relationship between yearly expansions vs recapture rate of tagged female salmon
scenarios <- c("Alt.1c", "Alt.2e", "Alt.3m", "Alt.3r", "Alt.3s")
#show_extra = TRUE
#pulling in real-time flow data for KES and KWK
library(dplyr)
library(tidyverse)
library(lubridate)
# query parameters for SacPAS
# calendar year
queryYear=2023
# query dates can be empty string "" or explicit "mm/dd" (value will be NA for future dates or missing dates)
# empty string for end date will result in data through most recent date in database for given year
querySD="8/1"
queryED= paste0(month(as.Date('2023-10-08')),'/',day(as.Date('2023-10-08')))
outputFormat="csvSingle"
# KWK river flow data from SacPAS
queryKWKflow=paste("https://www.cbr.washington.edu/sacramento/data/php/rpt/mg.php?mgconfig=river&loc[]=KWK&data[]=Flow&outputFormat=",outputFormat,"&year[]=",queryYear,"&startdate=",querySD,"&enddate=",queryED, sep="")
kwkFlowData = read.csv(queryKWKflow) %>% slice(1:(n()-3))
# KES reservoir flow data from SacPAS
queryKESflow=paste("https://www.cbr.washington.edu/sacramento/data/php/rpt/mg.php?mgconfig=river&loc[]=KES&data[]=ReservoirOutflow&outputFormat=",outputFormat,"&year[]=",queryYear,"&startdate=",querySD,"&enddate=",queryED, sep="")
kesFlowData = read.csv(queryKESflow) %>% slice(1:(n()-3))
allflows <- rbind(kwkFlowData, kesFlowData)
allflows <- allflows %>%
mutate(Date = as.Date(paste0(mm.dd,'-',year), format = '%m-%d-%Y')) %>%
rename('Flow' = 'value') %>% select(Date, Gage = location, Flow)
