mutate(Buffer = if_else(grepl('Buffer', Type), 'YES', 'NO')) %>%
select(5,9,10) %>%
mutate(key = row_number())
dewater <- dewater %>% spread(key = 'Alts', value = 'Dewater')
#do any EOS fall below 2200 TAF?
EOS <- 2717
eosList <- list()
eosList <- eosList %>% append(
list(total_volume_as = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-10-01'))[, -1])*1.983/1000)),
after = length(eosList)
)
filtered_data <- filter(kesAug90, date >= paste0(yr,'-08-01') & date < paste0(yr,'-10-01'))
eos_aug90 <- colSums(filtered_data[, -1]) * 1.983 / 1000
eosList <- eosList %>% append(
list(Difference_from_aug90 = (eos_aug90 - colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-10-01'))[, -1])*1.983/1000)),
after = length(eosList)
)
eosList <- eosList %>% append(
list(Resulting_EOS = (EOS - (eos_aug90 - colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-10-01'))[, -1])*1.983/1000))),
after = length(eosList)
)
if(min(eosList$Resulting_EOS) > 2200){
TDM <- "All proposed scenarios are anticipated to have EOS storage greater than the 2200 TAF threshold and therefore would not be expected to contribute to TDM impacts to winter-run chinook salmon in the subsequent year"
} else {
TDM <- "One or more proposed scenarios are anticipated to have EOS storage below the 2200 TAF threshold and therefore would be expected to contribute to TDM in the subsequent year, though scenarios above the threshold are not expected to contribute to TDM impacts to winter-run chinook salmon in the subsequent year"
}
#automating expansion row names for table
exp <- vector()
pop_temp <- pop_tab %>% rename('Expansion' = 'Expansion Number') %>% filter(Expansion > 1, !grepl('Expected', Name))
for(i in 1:nrow(pop_temp)){
temp <- pop_temp[i,'Expansion']
temp <- paste0('Winter-run Percent Lost (expansion of ', temp,')')
exp[i] <- temp
}
#creating row names for table
Metric <- c("Avg Sept Flow (cfs)", "Avg Oct Flow (cfs)", "Sept-Feb Total Volume (TAF)", "Aug-Sept Total Volume (TAF)", "Anticipated EOS Storage (TAF)", "Winter-run Redds Dewatered", "Winter-run Percent Lost (current count)", "Winter-run Percent Lost (mean expansion of 2)", "Winter-run Redds Dewatered (250 cfs buffer)", "Winter-run Percent Lost (250 cfs buffer)")
#creating the table using the row names
table <- data.frame(Metric)
#creating a list to store all summary statistics below
tableList <- list()
#summary statistics for flow which are stored in tableList
tableList <- append(tableList, list(avg_sept_flow = colMeans(septKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- append(tableList, list(avg_oct_flow = colMeans(octKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- tableList %>% append(
list(total_volume_sf = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-09-01') & date < paste0(yr+1,'-03-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
tableList <- tableList %>% append(
list(total_volume_as = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-10-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
tableList <- tableList %>% append(
list(Resulting_EOS = (EOS - (eos_aug90 - colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-10-01'))[, -1])*1.983/1000))),
after = length(tableList)
)
#summary statistics for redd dewatering
tableList <- tableList %>% append(
list(wr_dewatered = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#summary statistics for redd dewatering with expansion factors
tableList <- tableList %>% append(
list(wr_pct_lost_300 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*2))*100),
after = length(tableList)
)
#summary statsitics for redd dewatering with flow buffer
tableList <- tableList %>% append(
list(wr_dewatered_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#binding summary statistics into one table
temp_table <- bind_rows(tableList)
#binding to original table with row names
table <- bind_cols(Metric, temp_table) %>% rename('Metric' = 1)
#adding fall-run dewatering to table
table <- rbind(table, setNames(table2, names(table))) %>%
mutate_at(c(2:ncol(table)), as.numeric)
# Separate the data into two parts: the first 5 rows and the remaining rows
table[,2:ncol(table)] <- round(table[,2:ncol(table)], 2)
# Print the modified table
colnames(table) <- gsub("_cfs$", "", colnames(table))
table_rounded <- table %>%
mutate(across(-Metric,
~ ifelse(row_number() <= 6,
format(round(.x, digits = 0), nsmall = 0, trim = TRUE),
round(.x, digits = 2))))
#knitr::kable(table,
#caption = paste0('Summary of various factors related to flow scenarios. Each scenario uses actual flow-to-date as of most current report and proposed flows for the remainder of the incubation period. Percentage of the population lost is based on the ',countDate,' count of ',reddCount,' Winter-run redds and updated redd counts may be available soon. See Scenario Descriptions file for additional information on each scenario.')) %>%
# kable_styling(font_size = 8) %>%
#column_spec(1, width = "4cm")
# Dynamically render table based on output format
if (knitr::is_html_output()) {
knitr::kable(table_rounded,
caption = paste0('Summary of water volume and winter-run and fall-run dewatering estimates related to flow scenarios. Each scenario uses actual flow-to-date as of most current report and proposed flows for the remainder of the incubation period. Percentage of the population lost is based on the ', countDate, ' count of ', reddCount, ' Winter-run redds. See Scenario Descriptions file for additional information on each scenario.')
)
} else if (knitr::is_latex_output()) {
knitr::kable(table_rounded,
caption = paste0('Summary of water volume and winter-run and fall-run dewatering estimates related to flow scenarios. Each scenario uses actual flow-to-date as of most current report and proposed flows for the remainder of the incubation period. Percentage of the population lost is based on the ', countDate, ' count of ', reddCount, ' Winter-run redds. See Scenario Descriptions file for additional information on each scenario.')
) %>%
kable_styling(font_size = 8) %>%
column_spec(1, width = "4cm")
} else if (knitr::pandoc_to("docx")) {
flextable::flextable(table_rounded) %>%
flextable::set_caption(caption = paste0('Table 2. Summary of water volume and winter-run and fall-run dewatering estimates related to flow scenarios. Each scenario uses actual flow-to-date as of most current report and proposed flows for the remainder of the incubation period. Percentage of the population lost is based on the ', countDate, ' count of ', reddCount, ' Winter-run redds. See Scenario Descriptions file for additional information on each scenario.')) %>%
flextable::width(width = 1, unit = "in") %>%
flextable::align(j = -1, align = 'center', part = 'all') %>%
flextable::font(font = 'Cambria', part = 'all')
}
View(allflows)
View(kesFlowReal)
View(kesTemp)
View(kesFlow)
View(kes)
View(allflows)
View(kwkFlowData)
queryED= Sys.Date()-1
queryED=Sys.Date()-1
queryED= paste0(month(queryED),'/',day(queryED))
#loading libraries and pulling in relevant data from excel files
library(tinytex)
library(data.table)
library(plyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(zoo)
library(kableExtra)
library(janitor)
library(lubridate)
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#setting yr for automating certain lables and filtering
yr = year(Sys.Date())
flow_date <- Sys.Date() #for later filterning
yr_exp <- 2 #this year's expected expansion number based on the linear relationship between yearly expansions vs recapture rate of tagged female salmon
########Read in redd data from shallow winter redd monitoring
redd_files <- list.files('External_data/ShallowRedds/', pattern = "\\.xlsx$", full.names = TRUE) #list all excel files
MaxReddFile <- max(redd_files) #reads the latest redd excel file
reddsheets <- excel_sheets(MaxReddFile) #list all sheets
#loading libraries and pulling in relevant data from excel files
library(tinytex)
library(data.table)
library(plyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(zoo)
library(kableExtra)
library(janitor)
library(lubridate)
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#setting yr for automating certain lables and filtering
yr = year(Sys.Date())
flow_date <- Sys.Date() #for later filterning
yr_exp <- 2 #this year's expected expansion number based on the linear relationship between yearly expansions vs recapture rate of tagged female salmon
########Read in redd data from shallow winter redd monitoring
redd_files <- list.files('External_data/ShallowRedds/', pattern = "\\.xlsx$", full.names = TRUE) #list all excel files
MaxReddFile <- max(redd_files) #reads the latest redd excel file
reddsheets <- excel_sheets(MaxReddFile) #list all sheets
reddsheet <- reddsheets[reddsheets == 'SHALLOW REDDS'] #filter sheet with shallow redd nfo
redds <- read_excel(MaxReddFile,  sheet = reddsheet, #read in shallow redd file and clean up.
range = cell_cols(c('A:I'))) %>%
na.omit() %>%
select(3,4,6,9) %>%
rename('Born.on.Date' = 1, 'Estimated.Date.of.Emergence' = 2, 'ACTUAL.or.ESTIMATED..DEWATER.FLOW' = 4) %>%
mutate_at(1:2, as.Date)#minor cleaning
reddsAll <- redds #putting in a spare dataframe or later use
########Read in most recent flow scenario data, cleaning up datasheet, etc.
Files <- list.files('External_data/FlowScen/', pattern = "xlsx$")
MaxFile <- max(Files)
flowsheets <- excel_sheets(paste0('External_data/FlowScen/',MaxFile))
flowsheet <- grep("Alternatives", flowsheets, value = TRUE) #for pulling in flow alternatives
scensheet <- grep("Desired", flowsheets, value = TRUE) #for pulling in desired scenarios sheet
#pull in desired scenarios
scen <- read_excel(paste0('External_data/FlowScen/',MaxFile),
sheet = scensheet, col_names = TRUE) %>%
filter(Use == 'Y') %>%
clean_names() %>%
mutate(scenario = gsub("[^[:alnum:]]+", "", scenario)) %>%
mutate(scenario = tolower(scenario)) %>%
pull(scenario)
#pull in flow alternatives
kesFlowTemp <- read_excel(paste0('External_data/FlowScen/',MaxFile),
sheet = flowsheet, skip = 1, col_names = TRUE) %>%
mutate(Date = as.Date(as.numeric(Date), origin = "1899-12-30")) %>%
filter(!is.na(Date)) %>%
select(-contains("Actual"), -contains("Timeline")) %>%  # Exclude columns with 'Actual' and 'Timeline'
select_if(~ !all(is.na(.))) %>% #Exlcude blank columns
gather(key = scenarios, value = flow, -Date) %>% #gather for easier filtering
clean_names() %>%
mutate(scenarios = gsub("[^[:alnum:]]+", "", scenarios)) %>%
mutate(scenarios = tolower(scenarios))
kesFlow <- kesFlowTemp %>%
filter(scenarios %in% scen) %>% #filter for desired scenarios
spread(key = scenarios, value = flow) #spread back out for later use
########Import relevant fall-run redd dewatering data
#import fall-run spawn info
spawn <- read.csv('Model_inputs/spawn_timing.csv') %>%
mutate(Date = as.Date(Day, origin = as.Date(paste0(yr,'-01-01')))) %>% #converts Julian Day to date for current year
rename('EmergDays' = 'EmergDate') %>% #renaming for later use
filter(Run == 'Fall') #filtering just for fall-run
#import gard look up table
fall_lookup <- read.csv('Model_inputs/model_dewater_flows.csv') %>%
rename('GardDewater' = 'Dewater', 'GardSpawn' = 'Spawn_Flows') %>%
filter(Run == 'Fall')
########read in Redd Count data and date from most recent file with that info (different folder than standard redd files)
count_pattern <- 'To date, unexpanded redd count' #set pattern for count cell to look for
date_pattern <- 'Through' #set pattern for date cell to look for
CountFiles <- list.files('External_data/ShallowRedds/ReddCount/',
pattern = "xlsx$") #list files with reporting tab in them
MaxCountFile <- max(CountFiles) #single out the most recent file
sheetCount <- data.frame(excel_sheets(paste0('External_data/ShallowRedds/ReddCount/',
MaxCountFile))) %>% #read in most recent excel WITH count data
rename('name' = 1) %>%
filter(grepl('REPORTING', name, ignore.case = TRUE)) %>%
pull(name)
#for Count data
Count <- read_excel(paste0('External_data/ShallowRedds/ReddCount/',MaxCountFile),
sheet = sheetCount) #pull in sheet with count data
reddCount <- round(as.numeric(Count[[(which(Count[, 2] == 'To date, unexpanded redd count') + 1), 2]]),0) #isolate count
countDate <- format(as.Date(as.numeric(Count[[(which(Count[, 1] == 'Through') + 1), 1]]),
origin = "1899-12-30"), "%B %d, %Y") #isolate count data
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{4}-\\d{2}-\\d{2}).*", "\\1", MaxReddFile), format = "%Y-%m-%d"), "%B %d, %Y") #isolate most recent redd info date from file name
updatedReddInfoDate <- read_excel(paste0('External_data/ShallowRedds/ReddCount/',MaxReddFile), sheet = 'SACPAS Shallow Redds')
updatedReddInfoDate <- read_excel(paste0('External_data/ShallowRedds/',MaxReddFile), sheet = 'SACPAS Shallow Redds')
updatedReddInfoDate <- read_excel(MaxReddFile, sheet = 'SACPAS Shallow Redds')
updatedReddInfoDate <- read_excel(MaxReddFile, sheet = 'SACPAS Shallow Redds')
View(updatedReddInfoDate)
updatedReddInfoDate <- read_excel(MaxReddFile, sheet = 'SACPAS Shallow Redds')
updatedReddInfoDate <- read_excel(MaxReddFile, sheet = 'SACPAS Shallow Redds') %>%
max(measurement_date)
updatedReddInfoDate <- read_excel(MaxReddFile, sheet = 'SACPAS Shallow Redds') %>%
summarize(max(measurement_date)) %>% pull()
library(tidyverse)
library(ggplot2)
library(readxl)
library(plotly)
library(htmlwidgets)
files <- list.files(path = 'External_data/ShallowRedds', pattern = 'xlsx')
maxFile <- max(files)
redds <- read_excel(paste0('External_data/ShallowRedds/',maxFile), sheet = 'SACPAS Shallow Redds')
reddDate <- redds %>%
summarize(max(measurement_date)) %>% pull()
library(tidyverse)
library(ggplot2)
library(readxl)
library(plotly)
library(htmlwidgets)
files <- list.files(path = 'External_data/ShallowRedds', pattern = 'xlsx')
maxFile <- max(files)
redds <- read_excel(paste0('External_data/ShallowRedds/',maxFile), sheet = 'SACPAS Shallow Redds')
reddDate <- redds %>%
summarize(max(measurement_date)) %>% pull()
title <- paste0('Shallow water redd monitoring as of ',reddDate)
redds2 <- redds %>%
group_by(Redd_ID) %>%
filter(all(status == "OK")) %>%
summarise(
min_depth = min(measurement_depth, na.rm = TRUE),
has_trample = any(str_detect(comments, regex('trample', ignore_case = TRUE)))
) %>%
mutate(Risk = case_when(
min_depth <= 10 & has_trample ~ 3,
min_depth <= 10 ~ 1,
has_trample ~ 2,
TRUE ~ 0
)) %>%
right_join(redds, by = "Redd_ID") %>%
ungroup() %>%
arrange(Redd_ID, measurement_date) %>%
mutate(measurement_date = as.Date(measurement_date)) %>%
group_by(Redd_ID) %>%
filter(all(status == "OK")) %>%
ungroup() %>%
mutate(days_to_emerg = difftime(Estimated_Emergence, measurement_date, unit = 'days'))
depth <- ggplot(redds2, aes(x = measurement_date, y = measurement_depth, group = Redd_ID)) +
geom_rect(aes(fill=factor(Risk)), xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf, alpha=0.05, color = 'black') +
geom_point(fill = '#999999') +
geom_line(linetype = 'dashed', color = '#666666') +
#geom_smooth(aes(color = as.factor(status)), method = "loess", span = 0.6, se = FALSE) +
facet_wrap(~ Redd_ID, nrow = 4) +
labs(x = 'Date', y = 'Water Depth (in)', fill = 'Risk', title = title) +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y.right=element_text(margin = margin(l = 10)),
plot.margin = margin(.1, .1, .001, .1, "cm")) +
scale_x_date(date_breaks = '1 months', date_labels = '%b') +
# scale_linetype_manual(name = '', values = c('dotted', 'longdash'), labels = c('Dewatering Flow (CFS)', 'KWK Flows (CFS)')) +
scale_fill_manual(values = c('0' = 'NA', '1' = '#990000', '2' = '#FF9900', '3' = '#CC33CC'),
labels = c('0' = 'Minimal', '1' = 'Dewater Risk (<= 10 in)', '2' = 'Trampled', '3' = 'Dewater Risk/Trampled')) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
depth
reddDate <- redds %>%
summarize(format(max(measurement_date), '%B %d, %Y')) %>% pull()
View(redds2)
risk <- redds2 %>%
group_by(Redd_ID) %>%
summarize(Risk = max(Risk))
View(risk)
depth <- ggplot(redds2, aes(x = measurement_date, y = measurement_depth, group = Redd_ID)) +
geom_rect(risk, mapping = aes(fill=factor(Risk)), xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf, alpha=0.05, color = 'black') +
geom_point(fill = '#999999') +
geom_line(linetype = 'dashed', color = '#666666') +
#geom_smooth(aes(color = as.factor(status)), method = "loess", span = 0.6, se = FALSE) +
facet_wrap(~ Redd_ID, nrow = 4) +
labs(x = 'Date', y = 'Water Depth (in)', fill = 'Risk', title = title) +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y.right=element_text(margin = margin(l = 10)),
plot.margin = margin(.1, .1, .001, .1, "cm")) +
scale_x_date(date_breaks = '1 months', date_labels = '%b') +
# scale_linetype_manual(name = '', values = c('dotted', 'longdash'), labels = c('Dewatering Flow (CFS)', 'KWK Flows (CFS)')) +
scale_fill_manual(values = c('0' = 'NA', '1' = '#990000', '2' = '#FF9900', '3' = '#CC33CC'),
labels = c('0' = 'Minimal', '1' = 'Dewater Risk (<= 10 in)', '2' = 'Trampled', '3' = 'Dewater Risk/Trampled')) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
depth
depth <- ggplot() +
geom_rect(risk, mapping = aes(fill=factor(Risk)), xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf, alpha=0.05, color = 'black') +
geom_point(redds2,
mapping = aes(x = measurement_date, y = measurement_depth, group = Redd_ID),
fill = '#999999') +
geom_line(redds2,
mapping = aes(x = measurement_date, y = measurement_depth, group = Redd_ID),
linetype = 'dashed', color = '#666666') +
#geom_smooth(aes(color = as.factor(status)), method = "loess", span = 0.6, se = FALSE) +
facet_wrap(~ Redd_ID, nrow = 4) +
labs(x = 'Date', y = 'Water Depth (in)', fill = 'Risk', title = title) +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y.right=element_text(margin = margin(l = 10)),
plot.margin = margin(.1, .1, .001, .1, "cm")) +
scale_x_date(date_breaks = '1 months', date_labels = '%b') +
# scale_linetype_manual(name = '', values = c('dotted', 'longdash'), labels = c('Dewatering Flow (CFS)', 'KWK Flows (CFS)')) +
scale_fill_manual(values = c('0' = 'NA', '1' = '#990000', '2' = '#FF9900', '3' = '#CC33CC'),
labels = c('0' = 'Minimal', '1' = 'Dewater Risk (<= 10 in)', '2' = 'Trampled', '3' = 'Dewater Risk/Trampled')) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
depth
depth <- ggplot() +
geom_rect(risk, mapping = aes(fill=factor(Risk)), xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf, alpha=0.25, color = 'black') +
geom_point(redds2,
mapping = aes(x = measurement_date, y = measurement_depth, group = Redd_ID),
fill = '#999999') +
geom_line(redds2,
mapping = aes(x = measurement_date, y = measurement_depth, group = Redd_ID),
linetype = 'dashed', color = '#666666') +
#geom_smooth(aes(color = as.factor(status)), method = "loess", span = 0.6, se = FALSE) +
facet_wrap(~ Redd_ID, nrow = 4) +
labs(x = 'Date', y = 'Water Depth (in)', fill = 'Risk', title = title) +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y.right=element_text(margin = margin(l = 10)),
plot.margin = margin(.1, .1, .001, .1, "cm")) +
scale_x_date(date_breaks = '1 months', date_labels = '%b') +
# scale_linetype_manual(name = '', values = c('dotted', 'longdash'), labels = c('Dewatering Flow (CFS)', 'KWK Flows (CFS)')) +
scale_fill_manual(values = c('0' = 'NA', '1' = '#990000', '2' = '#FF9900', '3' = '#CC33CC'),
labels = c('0' = 'Minimal', '1' = 'Dewater Risk (<= 10 in)', '2' = 'Trampled', '3' = 'Dewater Risk/Trampled')) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
depth
library(tidyverse)
library(ggplot2)
library(readxl)
library(plotly)
library(htmlwidgets)
files <- list.files(path = 'External_data/ShallowRedds', pattern = 'xlsx')
maxFile <- max(files)
redds <- read_excel(paste0('External_data/ShallowRedds/',maxFile), sheet = 'SACPAS Shallow Redds')
reddDate <- redds %>%
summarize(format(max(measurement_date), '%B %d, %Y')) %>% pull()
title <- paste0('Shallow water redd monitoring as of ',reddDate)
redds2 <- redds %>%
group_by(Redd_ID) %>%
filter(all(status == "OK")) %>%
summarise(
min_depth = min(measurement_depth, na.rm = TRUE),
has_trample = any(str_detect(comments, regex('trample', ignore_case = TRUE)))
) %>%
mutate(Risk = case_when(
min_depth <= 10 & has_trample ~ 3,
min_depth <= 10 ~ 1,
has_trample ~ 2,
TRUE ~ 0
)) %>%
right_join(redds, by = "Redd_ID") %>%
ungroup() %>%
arrange(Redd_ID, measurement_date) %>%
mutate(measurement_date = as.Date(measurement_date)) %>%
group_by(Redd_ID) %>%
filter(all(status == "OK")) %>%
ungroup() %>%
mutate(days_to_emerg = difftime(Estimated_Emergence, measurement_date, unit = 'days'))
risk <- redds2 %>%
group_by(Redd_ID) %>%
summarize(Risk = max(Risk))
depth <- ggplot() +
geom_rect(risk, mapping = aes(fill=factor(Risk)), xmin = -Inf,xmax = Inf,
ymin = -Inf,ymax = Inf, alpha=0.25, color = 'black') +
geom_point(redds2,
mapping = aes(x = measurement_date, y = measurement_depth, group = Redd_ID),
fill = '#999999') +
geom_line(redds2,
mapping = aes(x = measurement_date, y = measurement_depth, group = Redd_ID),
linetype = 'dashed', color = '#666666') +
#geom_smooth(aes(color = as.factor(status)), method = "loess", span = 0.6, se = FALSE) +
facet_wrap(~ Redd_ID, nrow = 4) +
labs(x = 'Date', y = 'Water Depth (in)', fill = 'Risk', title = title) +
theme_bw() +
theme(legend.position = 'bottom',
axis.text.x = element_text(size = 8),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y.right=element_text(margin = margin(l = 10)),
plot.margin = margin(.1, .1, .001, .1, "cm")) +
scale_x_date(date_breaks = '1 months', date_labels = '%b') +
# scale_linetype_manual(name = '', values = c('dotted', 'longdash'), labels = c('Dewatering Flow (CFS)', 'KWK Flows (CFS)')) +
scale_fill_manual(values = c('0' = 'NA', '1' = '#990000', '2' = '#FF9900', '3' = '#CC33CC'),
labels = c('0' = 'Minimal', '1' = 'Dewater Risk (<= 10 in)', '2' = 'Trampled', '3' = 'Dewater Risk/Trampled')) +
guides(fill = guide_legend(override.aes = list(alpha = 1)))
depth
ggsave(plot = depth, filename = 'shallow_redd_depths.png', width = 9, height = 6.5, units = 'in')
interactive_plot <- ggplot(redds2, aes(x = measurement_date, y = measurement_depth, group = Redd_ID)) +
geom_point(aes(color = measurement_depth,
text = paste("Depth (in):", measurement_depth,
"<br>Days to Emergence:", days_to_emerg,
"<br>Measurement Date:", format(measurement_date, "%B %d, %Y"),
"<br>Emergence Date: ", format(Estimated_Emergence, "%B %d, %Y"),
"<br>Location:", location,
"<br>Comments", comments)), size = 2)+
geom_line(linetype = 'dashed', color = '#666666', alpha = 0.7) +
facet_wrap(~ Redd_ID, nrow = 4) +
labs(x = 'Date', y = 'Water Depth (in)', color = 'Depth (in)', title = title) +
theme_bw() +
theme(legend.position = 'bottom',
axis.title.y = element_text(margin = margin(r = 8)),
axis.title.x = element_text(margin = margin(t = 8)),
plot.margin = margin(.25, .25, .25, .25, "cm"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
scale_x_date(date_breaks = '1 months', date_labels = '%b') +
scale_colour_gradient(low = 'red', high = 'green')
#scale_color_manual(values = c('0' = 'NA', '1' = '#990000', '2' = '#FF9900', '3' = '#CC33CC'),
#labels = c('0' = 'Minimal', '1' = 'Dewater Risk', '2' = 'Trampled', '3' = 'Dewater Risk/Trampled')) +
interactive_plot
# Convert ggplot to plotly
interactive <- ggplotly(interactive_plot, tooltip = c("text")) %>%
layout(
margin = list(l = 60, r = 40, b = 60, t = 55),  # Adjust left, right, bottom, top margins
autosize = TRUE  # Allow the plot to automatically resize
)
interactive
library(tidyverse)
t <- read.csv('Model_inputs/spawn_timing.csv')
View(t)
library(tidyverse)
t <- read.csv('Model_inputs/spawn_timing.csv') %>%
mutate(Date = as.Date(Day, origin = '2024-01-01'))
View(t)
t <- read.csv('Model_inputs/spawn_timing.csv') %>%
mutate(month = month(as.Date(Day, origin = '2024-01-01')), label = TRUE)
View(t)
t <- read.csv('Model_inputs/spawn_timing.csv') %>%
mutate(month = month(as.Date(Day, origin = '2024-01-01'), label = TRUE))
View(t)
summary <- t %>% group_by(Run, month) %>%
summarize(n = n(), proportion = sum(Prop))
View(summary)
summary <- t %>% group_by(Run, month) %>%
summarize(n = n(), proportion = round(sum(Prop),2))
summary <- t %>% group_by(Run, month) %>%
summarize(n = n(), proportion = round(sum(Prop),2)) %>%
filter(Run == 'Fall')
formattable(summary)
formattable::formattable(summary)
write.csv(summary, file = 'summary.csv', row.names = FALSE)
View(t)
summary <- t %>% group_by(Run, month) %>%
summarize(nrows = n(), proportionSpawn = round(sum(Prop),2)) %>%
filter(Run == 'Fall')
write.csv(summary, file = 'summary.csv', row.names = FALSE)
summary <- t %>% group_by(Run, month) %>%
summarize(nrows = n(), proportionSpawn = round(sum(Prop),2)) %>%
filter(Run == 'Fall')
write.csv(summary, file = 'summary.csv', row.names = FALSE)
View(summary)
