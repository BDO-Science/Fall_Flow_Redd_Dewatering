} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "Dewatered"
} else {
reddsTable$cols[r] <- "Remaining"
}
}
}
reddsTable <- reddsTable %>%
rename('Date' = 'Estimated.Date.of.Emergence', 'Flow' = 'ACTUAL.or.ESTIMATED..DEWATER.FLOW') %>%
mutate(cols = factor(cols, levels = c('Remaining', 'Emerged', 'Dewatered'), labels = c('Re','Em', 'De')))
flows <- kesFlowReal %>%
gather(key = Alts, value = Flow, contains('cfs')) %>%
filter(date >= todays_date) %>%
mutate(Alts = gsub('_cfs','',Alts))
ggplot() + geom_line(flows, mapping = aes(x = date, y = Flow, color = Alts), size = 0.75) +
geom_line(allflows, mapping = aes(x = date, y = Flow, linetype = Gage), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 3, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'),
fontface = 'bold', alpha = 0.6) +
ylim(ymin, ymax) +
xlim(min(as.Date(paste0(yr,'-08-01'))), (max(reddsTable$date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 12),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
legend.title = element_text(size = 14),
legend.key.size = unit(0.3, 'cm')) +
scale_fill_manual(values = c('lightgrey', 'steelblue3', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date(paste0(yr,'-08-01')), xmax = max(todays_date),
ymin = 3000, ymax = max(allflows$Flow) + 100, fill = 'darkgrey', color = 'black', alpha = 0.2, linetype = 'dotted') +
annotate(geom = 'text', x = (mid + 0.5), y = max(allflows$Flow) + 400, size = 3.5,
fontface = 'italic', label = 'Real-time Flows') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 9350, size = 3, label = 'KWK') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 7750, size = 3, label = 'KES')
View(flows)
View(allflows)
View(reddsTable)
#, fig.dim = c(8,5)
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
#ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
ymax <- round_any(max(allflows$Flow)+250, 500, f = ceiling)
todays_date <- Sys.Date()
mid <- as.Date(paste0(yr,'-08-01')) + floor((todays_date - as.Date(paste0(yr,'-08-01')))/2)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "Emerged"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "Dewatered"
} else {
reddsTable$cols[r] <- "Remaining"
}
}
}
reddsTable <- reddsTable %>%
rename('Date' = 'Estimated.Date.of.Emergence', 'Flow' = 'ACTUAL.or.ESTIMATED..DEWATER.FLOW') %>%
mutate(cols = factor(cols, levels = c('Remaining', 'Emerged', 'Dewatered'), labels = c('Re','Em', 'De')))
flows <- kesFlowReal %>%
gather(key = Alts, value = Flow, contains('cfs')) %>%
filter(date >= todays_date) %>%
mutate(Alts = gsub('_cfs','',Alts))
ggplot() + geom_line(flows, mapping = aes(x = date, y = Flow, color = Alts), size = 0.75) +
geom_line(allflows, mapping = aes(x = Date, y = Flow, linetype = Gage), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 3, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'),
fontface = 'bold', alpha = 0.6) +
ylim(ymin, ymax) +
xlim(min(as.Date(paste0(yr,'-08-01'))), (max(reddsTable$date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 12),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
legend.title = element_text(size = 14),
legend.key.size = unit(0.3, 'cm')) +
scale_fill_manual(values = c('lightgrey', 'steelblue3', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date(paste0(yr,'-08-01')), xmax = max(todays_date),
ymin = 3000, ymax = max(allflows$Flow) + 100, fill = 'darkgrey', color = 'black', alpha = 0.2, linetype = 'dotted') +
annotate(geom = 'text', x = (mid + 0.5), y = max(allflows$Flow) + 400, size = 3.5,
fontface = 'italic', label = 'Real-time Flows') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 9350, size = 3, label = 'KWK') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 7750, size = 3, label = 'KES')
ggplot() + geom_line(flows, mapping = aes(x = date, y = Flow, color = Alts), size = 0.75) +
geom_line(allflows, mapping = aes(x = Date, y = Flow, linetype = Gage), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 3, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'),
fontface = 'bold', alpha = 0.6) +
ylim(ymin, ymax) +
xlim(min(as.Date(paste0(yr,'-08-01'))), (max(reddsTable$date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 12),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
legend.title = element_text(size = 14),
legend.key.size = unit(0.3, 'cm')) +
scale_fill_manual(values = c('lightgrey', 'steelblue3', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date(paste0(yr,'-08-01')), xmax = max(todays_date),
ymin = 3000, ymax = max(allflows$Flow) + 100, fill = 'darkgrey', color = 'black', alpha = 0.2, linetype = 'dotted') +
annotate(geom = 'text', x = (mid + 0.5), y = max(allflows$Flow) + 400, size = 3.5,
fontface = 'italic', label = 'Real-time Flows') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 9350, size = 3, label = 'KWK') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 7750, size = 3, label = 'KES')
ggplot() + geom_line(flows, mapping = aes(x = date, y = Flow, color = Alts), size = 0.75) +
geom_line(allflows, mapping = aes(x = Date, y = Flow, linetype = Gage), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 3, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'),
fontface = 'bold', alpha = 0.6) +
ylim(ymin, ymax) +
xlim(min(as.Date(paste0(yr,'-08-01'))), (max(reddsTable$date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 12),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
legend.title = element_text(size = 14),
legend.key.size = unit(0.3, 'cm')) +
scale_fill_manual(values = c('lightgrey', 'steelblue3', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date(paste0(yr,'-08-01')), xmax = max(todays_date),
ymin = 3000, ymax = max(allflows$Flow) + 100, fill = 'darkgrey', color = 'black', alpha = 0.2, linetype = 'dotted') +
annotate(geom = 'text', x = (mid + 0.5), y = max(allflows$Flow) + 400, size = 3.5,
fontface = 'italic', label = 'Real-time Flows')
ggplot() + geom_line(flows, mapping = aes(x = date, y = Flow, color = Alts), size = 0.75) +
geom_line(allflows, mapping = aes(x = Date, y = Flow, linetype = Gage), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 3, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'),
fontface = 'bold', alpha = 0.6) +
ylim(ymin, ymax) +
xlim(min(as.Date(paste0(yr,'-08-01'))), (max(reddsTable$date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 12),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
legend.title = element_text(size = 14),
legend.key.size = unit(0.3, 'cm')) +
scale_fill_manual(values = c('lightgrey', 'steelblue3', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date(paste0(yr,'-08-01')), xmax = max(todays_date),
ymin = 3000, ymax = max(allflows$Flow) + 100, fill = 'darkgrey', color = 'black', alpha = 0.2, linetype = 'dotted')
#, fig.dim = c(8,5)
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
#ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
ymax <- round_any(max(allflows$Flow)+250, 500, f = ceiling)
todays_date <- Sys.Date()
mid <- as.Date(paste0(yr,'-08-01')) + floor((todays_date - as.Date(paste0(yr,'-08-01')))/2)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "Emerged"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "Dewatered"
} else {
reddsTable$cols[r] <- "Remaining"
}
}
}
reddsTable <- reddsTable %>%
rename('Date' = 'Estimated.Date.of.Emergence', 'Flow' = 'ACTUAL.or.ESTIMATED..DEWATER.FLOW') %>%
mutate(cols = factor(cols, levels = c('Remaining', 'Emerged', 'Dewatered'), labels = c('Re','Em', 'De')))
flows <- kesFlowReal %>%
gather(key = Alts, value = Flow, contains('cfs')) %>%
filter(date >= todays_date) %>%
mutate(Alts = gsub('_cfs','',Alts))
ggplot() + geom_line(flows, mapping = aes(x = date, y = Flow, color = Alts), size = 0.75) +
geom_line(allflows, mapping = aes(x = Date, y = Flow, linetype = Gage), size = 0.75) +
scale_linetype_discrete(guide = "none") +
geom_label(reddsTable, mapping = aes(x = Date, y = Flow,
label = Count, fill = cols), min.segment.length = 4,
postion = 'dodge', size = 3, label.padding = unit(0.25, 'lines'),label.r = unit(.35, 'lines'),
fontface = 'bold', alpha = 0.6) +
ylim(ymin, ymax) +
xlim(min(as.Date(paste0(yr,'-08-01'))), (max(reddsTable$Date) + 5)) +
labs(x = 'Date', y = 'Flow (cfs)', fill = 'Redd Status') +
theme(legend.position = 'bottom',
legend.text = element_text(size = 12),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
legend.title = element_text(size = 14),
legend.key.size = unit(0.3, 'cm')) +
scale_fill_manual(values = c('lightgrey', 'steelblue3', 'darkorange')) +
annotate(geom = 'rect', xmin = as.Date(paste0(yr,'-08-01')), xmax = max(todays_date),
ymin = 3000, ymax = max(allflows$Flow) + 100, fill = 'darkgrey', color = 'black', alpha = 0.2, linetype = 'dotted') +
annotate(geom = 'text', x = (mid + 0.5), y = max(allflows$Flow) + 400, size = 3.5,
fontface = 'italic', label = 'Real-time Flows') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 9350, size = 3, label = 'KWK') +
annotate(geom = 'text', x = as.Date('2023-09-03'), y = 7750, size = 3, label = 'KES')
worksheetSD <- read_xlsx(paste0('External_data/FlowScen/',MaxFile), sheet = "Scenario Description",range="A1:A1000",col_names=F,col_types="text")
# remove extraneous lines, keeping lines with "=" in it
keep=apply(worksheetSD,2,function(x.in) str_detect(x.in,"="))
worksheetSD=worksheetSD[keep,]
worksheetSD=worksheetSD[!is.na(worksheetSD[,1]),]
# split the Alts from the descriptions
num.in = dim(worksheetSD)[1]
scenarioDesc=data.frame(matrix(nrow=num.in,ncol=2))
colnames(scenarioDesc)=c("Scenario","Descripion")
# loop through dataframe, split original dataframe column 1 on literal "=" characters and trim leading and trailing space, create new dataframe with 2 columns "Scenario" and "Description"
# populates scenarioDesc dataframe
for(i in 1:num.in){
scenarioDesc[i,]=str_trim(str_split(worksheetSD[i,1],"=")[[1]])
}
#use scenarios defined in first chunk of code to filter the scenarioDesc dataframe
#scenarios2 <- str_replace(scenarios, 'Alt.', '') #parse down to include just the scenario name
#filter based on scenario name
#scenarioDesc <- scenarioDesc %>%
#filter(grepl(paste(toupper(scenarios2), collapse ='|'), toupper(Scenario)))
knitr::kable(scenarioDesc)
#caption = 'Description of scenarios being considered and compared by the Upper Sacramento Scheduling Team.') %>%
#column_spec(1, width = "2cm") %>%
#column_spec(2, width = "14cm")
knitr::kable(scenarioDesc, caption = 'Description of scenarios being considered and compared by the Upper Sacramento Scheduling Team.')
knitr::kable(scenarioDesc, caption = 'Description of scenarios being considered and compared by the Upper Sacramento Scheduling Team.')
worksheetSD <- read_xlsx(paste0('External_data/FlowScen/',MaxFile), sheet = "Scenario Description",range="A1:A1000",col_names=F,col_types="text")
# remove extraneous lines, keeping lines with "=" in it
keep=apply(worksheetSD,2,function(x.in) str_detect(x.in,"="))
worksheetSD=worksheetSD[keep,]
worksheetSD=worksheetSD[!is.na(worksheetSD[,1]),]
# split the Alts from the descriptions
num.in = dim(worksheetSD)[1]
scenarioDesc=data.frame(matrix(nrow=num.in,ncol=2))
colnames(scenarioDesc)=c("Scenario","Descripion")
# loop through dataframe, split original dataframe column 1 on literal "=" characters and trim leading and trailing space, create new dataframe with 2 columns "Scenario" and "Description"
# populates scenarioDesc dataframe
for(i in 1:num.in){
scenarioDesc[i,]=str_trim(str_split(worksheetSD[i,1],"=")[[1]])
}
#use scenarios defined in first chunk of code to filter the scenarioDesc dataframe
#scenarios2 <- str_replace(scenarios, 'Alt.', '') #parse down to include just the scenario name
#filter based on scenario name
#scenarioDesc <- scenarioDesc %>%
#filter(grepl(paste(toupper(scenarios2), collapse ='|'), toupper(Scenario)))
knitr::kable(scenarioDesc, caption = 'Description of scenarios being considered and compared by the Upper Sacramento Scheduling Team.')
#column_spec(1, width = "2cm") %>%
#column_spec(2, width = "14cm")
knitr::kable(scenarioDesc, caption = 'Description of scenarios being considered and compared by the Upper Sacramento Scheduling Team.') %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "14cm")
#loading libraries and pulling in relevant data from excel files
library(tinytex)
library(data.table)
library(plyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(zoo)
library(kableExtra)
library(janitor)
#set desired scenarios for later filtering
#scenarios <- c("Alt.1c", "Alt.2e", "Alt.3m", "Alt.3r", "Alt.3s")
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
yr = year(Sys.Date())
#Read in redd data from shallow winter redd monitoring
redd_files <- list.files('External_data/ShallowRedds/', pattern = "\\.xlsx$", full.names = TRUE) #list all excel files
MaxReddFile <- max(redd_files) #reads the latest redd excel file
reddsheets <- excel_sheets(MaxReddFile) #list all sheets
reddsheet <- reddsheets[reddsheets == 'SHALLOW REDDS'] #filter sheet with shallow redd nfo
redds <- read_excel(MaxReddFile,  sheet = reddsheet, #read in shallow redd file and clean up.
range = cell_cols(c('A:I')))
redds <- redds %>% na.omit() %>% select(3,4,6,9) %>%
rename('Born.on.Date' = 1, 'Estimated.Date.of.Emergence' = 2, 'ACTUAL.or.ESTIMATED..DEWATER.FLOW' = 4) %>%
mutate_at(1:2, as.Date)#minor cleaning
reddsAll <- redds
#Read in most recent flow scenario data, cleaning up datasheet, etc.
Files <- list.files('External_data/FlowScen/', pattern = "xlsx$")
MaxFile <- max(Files)
flowsheets <- excel_sheets(paste0('External_data/FlowScen/',MaxFile))
flowsheet <- grep("Alternatives", flowsheets, value = TRUE)
kesFlow <- read_excel(paste0('External_data/FlowScen/',MaxFile),
sheet = flowsheet, skip = 1, col_names = TRUE)
colnames(kesFlow) <- gsub("[^[:alnum:]]+", "", colnames(kesFlow))
kesFlow <- kesFlow %>%
clean_names() %>%
mutate(date = as.Date(as.numeric(date), origin = "1899-12-30")) %>%
filter(!is.na(date)) %>%
select(-contains("actual"), -contains("timeline")) %>%  # Exclude columns with 'Actual' and 'Timeline'
select_if(~ !all(is.na(.)))
colnames(kesFlow) <- gsub("[^[:alnum:]]+", "", colnames(kesFlow))
#kesFlow <- kesFlow %>% select(Date, all_of(scenarios)) %>% #selects only scenarios your interested in
# mutate(Date = Date + 365)#temporary to test code
#import fall-run spawn info
spawn <- read.csv('Model_inputs/spawn_timing.csv') %>%
mutate(Date = as.Date(Day, origin = as.Date(paste0(yr,'-01-01')))) %>% #will need to adjust origin for 2024
rename('EmergDays' = 'EmergDate') %>% filter(Run == 'Fall')
#import gard look up table
fall_lookup <- read.csv('Model_inputs/model_dewater_flows.csv') %>%
rename('GardDewater' = 'Dewater', 'GardSpawn' = 'Spawn_Flows') %>% filter(Run == 'Fall')
#read in Redd Count data and date from most recent file
count_pattern <- 'To date, unexpanded redd count' #set pattern for count cell to look for
date_pattern <- 'Through' #set pattern for date cell to look for
CountFiles <- list.files('External_data/ShallowRedds/ReddCount/', pattern = "xlsx$") #read in most recent excel WITH count data
MaxCountFile <- max(CountFiles)
sheetCount <- data.frame(excel_sheets(paste0('External_data/ShallowRedds/ReddCount/',MaxCountFile))) %>%
rename('name' = 1) %>%
filter(grepl('REPORTING', name, ignore.case = TRUE))
#for Count data
Count <- read_excel(paste0('External_data/ShallowRedds/ReddCount/',MaxCountFile),  sheet = sheetCount[1,1])
reddCount <- round(as.numeric(Count[[(which(Count[, 2] == 'To date, unexpanded redd count') + 1), 2]]),0)
countDate <- format(as.Date(as.numeric(Count[[(which(Count[, 1] == 'Through') + 1), 1]]),
origin = "1899-12-30"), "%B %d, %Y")
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{8}).*", "\\1", MaxReddFile), format = "%Y%m%d"), "%B %d, %Y")
flow_date <- Sys.Date()
yr_exp <- 3 #this year's expected expansion number based on the linear relationship between yearly expansions vs recapture rate of tagged female salmon
#scenarios <- c("Alt.1c", "Alt.2e", "Alt.3m", "Alt.3r", "Alt.3s")
#show_extra = TRUE
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{8}).*", "\\1", MaxReddFile), format = "%Y-%m%-d"), "%B %d, %Y")
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{8}).*", "\\1", MaxReddFile), format = "%Y-%m-%d"), "%B %d, %Y")
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{8}).*", "\\1", MaxReddFile), format = "%Y-%m-%d"), "%B %d, %Y")
MaxReddFile
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{4}-\\d{2}-\\d{2}).*", "\\1", MaxReddFile), format = "%Y-%m-%d"), "%B %d, %Y")
#loading libraries and pulling in relevant data from excel files
library(tinytex)
library(data.table)
library(plyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(zoo)
library(kableExtra)
library(janitor)
#set desired scenarios for later filtering
#scenarios <- c("Alt.1c", "Alt.2e", "Alt.3m", "Alt.3r", "Alt.3s")
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
yr = year(Sys.Date())
#Read in redd data from shallow winter redd monitoring
redd_files <- list.files('External_data/ShallowRedds/', pattern = "\\.xlsx$", full.names = TRUE) #list all excel files
MaxReddFile <- max(redd_files) #reads the latest redd excel file
reddsheets <- excel_sheets(MaxReddFile) #list all sheets
reddsheet <- reddsheets[reddsheets == 'SHALLOW REDDS'] #filter sheet with shallow redd nfo
redds <- read_excel(MaxReddFile,  sheet = reddsheet, #read in shallow redd file and clean up.
range = cell_cols(c('A:I')))
redds <- redds %>% na.omit() %>% select(3,4,6,9) %>%
rename('Born.on.Date' = 1, 'Estimated.Date.of.Emergence' = 2, 'ACTUAL.or.ESTIMATED..DEWATER.FLOW' = 4) %>%
mutate_at(1:2, as.Date)#minor cleaning
reddsAll <- redds
#Read in most recent flow scenario data, cleaning up datasheet, etc.
Files <- list.files('External_data/FlowScen/', pattern = "xlsx$")
MaxFile <- max(Files)
flowsheets <- excel_sheets(paste0('External_data/FlowScen/',MaxFile))
flowsheet <- grep("Alternatives", flowsheets, value = TRUE)
kesFlow <- read_excel(paste0('External_data/FlowScen/',MaxFile),
sheet = flowsheet, skip = 1, col_names = TRUE)
colnames(kesFlow) <- gsub("[^[:alnum:]]+", "", colnames(kesFlow))
kesFlow <- kesFlow %>%
clean_names() %>%
mutate(date = as.Date(as.numeric(date), origin = "1899-12-30")) %>%
filter(!is.na(date)) %>%
select(-contains("actual"), -contains("timeline")) %>%  # Exclude columns with 'Actual' and 'Timeline'
select_if(~ !all(is.na(.)))
colnames(kesFlow) <- gsub("[^[:alnum:]]+", "", colnames(kesFlow))
#kesFlow <- kesFlow %>% select(Date, all_of(scenarios)) %>% #selects only scenarios your interested in
# mutate(Date = Date + 365)#temporary to test code
#import fall-run spawn info
spawn <- read.csv('Model_inputs/spawn_timing.csv') %>%
mutate(Date = as.Date(Day, origin = as.Date(paste0(yr,'-01-01')))) %>% #will need to adjust origin for 2024
rename('EmergDays' = 'EmergDate') %>% filter(Run == 'Fall')
#import gard look up table
fall_lookup <- read.csv('Model_inputs/model_dewater_flows.csv') %>%
rename('GardDewater' = 'Dewater', 'GardSpawn' = 'Spawn_Flows') %>% filter(Run == 'Fall')
#read in Redd Count data and date from most recent file
count_pattern <- 'To date, unexpanded redd count' #set pattern for count cell to look for
date_pattern <- 'Through' #set pattern for date cell to look for
CountFiles <- list.files('External_data/ShallowRedds/ReddCount/', pattern = "xlsx$") #read in most recent excel WITH count data
MaxCountFile <- max(CountFiles)
sheetCount <- data.frame(excel_sheets(paste0('External_data/ShallowRedds/ReddCount/',MaxCountFile))) %>%
rename('name' = 1) %>%
filter(grepl('REPORTING', name, ignore.case = TRUE))
#for Count data
Count <- read_excel(paste0('External_data/ShallowRedds/ReddCount/',MaxCountFile),  sheet = sheetCount[1,1])
reddCount <- round(as.numeric(Count[[(which(Count[, 2] == 'To date, unexpanded redd count') + 1), 2]]),0)
countDate <- format(as.Date(as.numeric(Count[[(which(Count[, 1] == 'Through') + 1), 1]]),
origin = "1899-12-30"), "%B %d, %Y")
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{4}-\\d{2}-\\d{2}).*", "\\1", MaxReddFile), format = "%Y-%m-%d"), "%B %d, %Y")
flow_date <- Sys.Date()
yr_exp <- 3 #this year's expected expansion number based on the linear relationship between yearly expansions vs recapture rate of tagged female salmon
#scenarios <- c("Alt.1c", "Alt.2e", "Alt.3m", "Alt.3r", "Alt.3s")
#show_extra = TRUE
#pulling in real-time flow data for KES and KWK
library(dplyr)
library(tidyverse)
library(lubridate)
# query parameters for SacPAS
# calendar year
queryYear=yr
# query dates can be empty string "" or explicit "mm/dd" (value will be NA for future dates or missing dates)
# empty string for end date will result in data through most recent date in database for given year
querySD="8/1"
queryED= paste0(month(Sys.Date()),'/',day(Sys.Date()-1))
outputFormat="csvSingle"
# KWK river flow data from SacPAS
queryKWKflow=paste("https://www.cbr.washington.edu/sacramento/data/php/rpt/mg.php?mgconfig=river&loc[]=KWK&data[]=Flow&outputFormat=",outputFormat,"&year[]=",queryYear,"&startdate=",querySD,"&enddate=",queryED, sep="")
kwkFlowData = read.csv(queryKWKflow) %>% slice(1:(n()-3))
# KES reservoir flow data from SacPAS
queryKESflow=paste("https://www.cbr.washington.edu/sacramento/data/php/rpt/mg.php?mgconfig=river&loc[]=KES&data[]=ReservoirOutflow&outputFormat=",outputFormat,"&year[]=",queryYear,"&startdate=",querySD,"&enddate=",queryED, sep="")
kesFlowData = read.csv(queryKESflow) %>% slice(1:(n()-3))
allflows <- rbind(kwkFlowData, kesFlowData)
allflows <- allflows %>%
mutate(Date = as.Date(paste0(mm.dd,'-',year), format = '%m-%d-%Y')) %>%
rename('Flow' = 'value') %>% select(Date, Gage = location, Flow)
# Converting flows to Thousand Acre Feet and overlaying real time flows over flow scenarios as season progresses
kes <- allflows %>% filter(Gage =='KES') %>% select(-Gage, Date, KES = 'Flow')
names <- colnames(kesFlow)
names <- names[names != "date"]
kesTemp <- data.frame(Date = kes$Date)
for(i in names) {
name <- i
temp <- data.frame(name = kes$KES)
kesTemp <- cbind(kesTemp, temp)
}
colnames(kesTemp) <- colnames(kesFlow)
kesFlowReal <- bind_rows(kesTemp, filter(kesFlow, date > max(kes$Date)))
kesFlowReal <- kesFlowReal %>%
rename_with(~ paste0(., "_cfs"), -date) %>%  # Rename original columns with '_cfs'
mutate(across(ends_with("_cfs"), ~ . * 1.983 / 1000, .names = "{.col %>% str_replace('_cfs$', '')}_taf"))
septTAF <- subset(kesFlowReal, months(kesFlowReal$date) == "September")
octTAF <- subset(kesFlowReal, months(kesFlowReal$date) == "October")
# September Flow Average
septKesFlow <- subset (kesFlowReal, kesFlowReal$date < paste0(yr,'-10-01') & kesFlowReal$date >= paste0(yr, '-9-01'))
septKesFlow <- septKesFlow %>% select(date, contains("_cfs"))
octKesFlow <- subset (kesFlowReal, kesFlowReal$date >= paste0(yr,'-10-01') & kesFlowReal$date < paste0(yr, '-11-01'))
octKesFlow <- octKesFlow %>% select(date, contains("_cfs"))
#estimate fall-run redds dewatered
#function for converting flows to nearest number in Gard lookup
round_to_nearest <- function(x, basis_vector) {
nearest_value <- basis_vector[which.min(abs(basis_vector - x))]
return(nearest_value)
}
#transform kesFlowReal dataframe for model
redd_model <- kesFlowReal %>%
gather(key = Scenarios, value = Spawn_Flows, contains('cfs')) %>%
select(date, Scenarios, Spawn_Flows) %>%
mutate(Boards = if_else(date < as.Date(paste0(yr,'-11-01')), 'in', 'out')) %>%
mutate(Spawn_Flows = as.numeric(Spawn_Flows)) %>%
left_join(spawn, by = c('date'= 'Date')) %>%
filter(!is.na(Run)) %>%
mutate(Spawn_Flows = na.approx(Spawn_Flows), EmergDate = date + EmergDays) %>%
mutate(Dewater = sapply(EmergDate, function(edate) {
if (!is.na(edate)) {
min(Spawn_Flows[date <= edate & date >= date], na.rm = TRUE)
} else {
NA
}
})) %>%
mutate(Boards = if_else(month(date) < 11, 'in', 'out'))
redd_model <- redd_model %>%
mutate(GardSpawn = sapply(redd_model$Spawn_Flows, round_to_nearest, fall_lookup$GardSpawn)) %>%
mutate(GardDewater = sapply(redd_model$Dewater, round_to_nearest, fall_lookup$GardDewater)) %>%
left_join(fall_lookup, by = c('GardDewater', 'GardSpawn', 'Boards')) %>%
mutate(Prop_dewater = if_else(is.na(Prop_dewater), 0, Prop_dewater)) %>%
mutate(TotalDewater = Prop * Prop_dewater)
summary <- redd_model %>% group_by(Scenarios) %>%
summarize(Redds_lost = round((sum(TotalDewater)*100), 1)) %>%
rename('Fall-run dewatered (%)' = 'Redds_lost')
table2 <- setDT(as.data.frame(t(summary)), keep.rownames = TRUE, check.names = TRUE)
names(table2) <- table2 %>% slice(1) %>% unlist()
table2 <- table2 %>% slice(-1)
library(lubridate)
# Estimated number of redds dewatered
kesFlowReal2 <- kesFlowReal %>% select(date, contains("_cfs"))
kesFlowReal3 <- kesFlowReal2 %>% gather(key = 'Alts', value = 'Flow', -date)
name2 <- colnames(kesFlowReal2)
name2 <- name2[name2 != "date"]
#formatting new redds file for figuring out minimum flows
redds2 <- subset(redds, redds$Status == "OK" | redds$Status == "DEWATERED")
for (col in name2) { #adding alternative names to redd dataframe
redds2[[col]] <- NA
}
redds2 <- redds2 %>% gather(key = 'Alts', value = 'Flow', -1:-4) %>%
select(-Flow)
flowList <- list()
for(i in 1:nrow(redds2)){
filtered <- kesFlowReal3 %>% filter(Alts == redds2$Alts[i]) %>%
filter(date >= redds2$Born.on.Date[i] & date <= redds2$Estimated.Date.of.Emergence[i])
minflow <- min(filtered$Flow)
flowList[[i]] <- minflow
}
test2 <- cbind(flowList)
dewater <- cbind(redds2, test2)
dewater <- dewater %>% mutate(Dewater = if_else(flowList <= ACTUAL.or.ESTIMATED..DEWATER.FLOW, 1, 0)) %>%
mutate(Dewater_Buffer = ACTUAL.or.ESTIMATED..DEWATER.FLOW + 250) %>%
mutate(Dewatered_Buffer = if_else(flowList <= Dewater_Buffer, 1, 0)) %>%
gather(key = 'Type', value = 'Dewater', 7,9) %>%
mutate(Buffer = if_else(grepl('Buffer', Type), 'YES', 'NO')) %>%
select(5,9,10) %>%
mutate(key = row_number())
dewater <- dewater %>% spread(key = 'Alts', value = 'Dewater')
View(reddsAll)
nrow(subset(reddsAll, reddsAll$Status == "EMERGED"))
nrow(subset(reddsAll, reddsAll$Status == "DEWATERED"))
View(summary)
min(summary[2])
max(summary[2])
