mutate(Dewater_Buffer = ACTUAL.or.ESTIMATED..DEWATER.FLOW + 250) %>%
mutate(Dewatered_Buffer = if_else(flowList <= Dewater_Buffer, 1, 0)) %>%
gather(key = 'Type', value = 'Dewater', 7,9) %>%
mutate(Buffer = if_else(grepl('Buffer', Type), 'YES', 'NO')) %>%
select(5,9,10) %>%
mutate(key = row_number())
dewater <- dewater %>% spread(key = 'Alts', value = 'Dewater')
#automating expansion row names for table
exp <- vector()
pop_temp <- pop_tab %>% rename('Expansion' = 'Expansion Number') %>% filter(Expansion > 1, !grepl('Expected', Name))
for(i in 1:nrow(pop_temp)){
temp <- pop_temp[i,'Expansion']
temp <- paste0('Winter-run Percent Lost (expansion of ', temp,')')
exp[i] <- temp
}
#creating row names for table
Metric <- c("Avg Sept Flow (cfs)", "Avg Oct Flow (cfs)", "Sept-Feb Total Volume (TAF)", "Aug-Oct Total Volume (TAF)", "Winter-run Redds Dewatered", "Winter-run Percent Lost (current count)", paste0("Winter-run Percent Lost (expansion of ", yr_exp, ")"),exp , "Winter-run Redds Dewatered (250 cfs buffer)", "Winter-run Percent Lost (250 cfs buffer)")
#creating the table using the row names
table <- data.frame(Metric)
#creating a list to store all summary statistics below
tableList <- list()
#summary statistics for flow which are stored in tableList
tableList <- append(tableList, list(avg_sept_flow = colMeans(septKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- append(tableList, list(avg_oct_flow = colMeans(octKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- tableList %>% append(
list(total_volume_sf = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-09-01') & date < paste0(yr+1,'-03-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
tableList <- tableList %>% append(
list(total_volume_ao = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-11-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
#summary statistics for redd dewatering
tableList <- tableList %>% append(
list(wr_dewatered = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#summary statistics for redd dewatering with expansion factors
tableList <- tableList %>% append(
list(wr_pct_lost_300 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*3))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_198 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*1.98))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_345 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*3.45))*100),
after = length(tableList)
)
#summary statsitics for redd dewatering with flow buffer
tableList <- tableList %>% append(
list(wr_pct_lost_125 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*1.25))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_dewatered_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#binding summary statistics into one table
temp_table <- bind_rows(tableList)
#binding to original table with row names
table <- bind_cols(Metric, temp_table) %>% rename('Metric' = 1)
#adding fall-run dewatering to table
table <- rbind(table, setNames(table2, names(table))) %>%
mutate_at(c(2:ncol(table)), as.numeric)
# Separate the data into two parts: the first 5 rows and the remaining rows
table[,2:ncol(table)] <- round(table[,2:ncol(table)], 2)
# Print the modified table
colnames(table) <- gsub("_cfs$", "", colnames(table))
knitr::kable(table,
caption = paste0('Average September and October Keswick (KES) Flow in cfs, total water volume of each alternative for August through October and September through February in TAF, estimated numbers of SRWC redds dewatered, and percent of population that would be lost under each of the proposed alternatives. KES Flow data uses actual flow-to-date as of ',format(max(allflows$Date), '%B %d, %Y'),' and proposed flows for the remainder of the incubation period. Redd dewatering is considered at the actual or estimated dewatering flow and with a 250 cfs buffer applied to the actual/estimated dewatering flow. Percentage of the population lost is based on the ',countDate,' count of ',reddCount,' Winter-run redds and updated redd counts may be available soon. See Scenario Descriptions file for additional information on each scenario.'))
#loading libraries and pulling in relevant data from excel files
library(tinytex)
library(data.table)
library(plyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(zoo)
library(kableExtra)
library(janitor)
#set desired scenarios for later filtering
#scenarios <- c("Alt.1c", "Alt.2e", "Alt.3m", "Alt.3r", "Alt.3s")
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
yr = year(Sys.Date())
#Read in redd data from shallow winter redd monitoring
redd_files <- list.files('External_data/ShallowRedds/', pattern = "\\.xlsx$", full.names = TRUE) #list all excel files
MaxReddFile <- max(redd_files) #reads the latest redd excel file
reddsheets <- excel_sheets(MaxReddFile) #list all sheets
reddsheet <- reddsheets[reddsheets == 'SHALLOW REDDS'] #filter sheet with shallow redd nfo
redds <- read_excel(MaxReddFile,  sheet = reddsheet, #read in shallow redd file and clean up.
range = cell_cols(c('A:I')))
redds <- redds %>% na.omit() %>% select(3,4,6,9) %>%
rename('Born.on.Date' = 1, 'Estimated.Date.of.Emergence' = 2, 'ACTUAL.or.ESTIMATED..DEWATER.FLOW' = 4) %>%
mutate_at(1:2, as.Date)#minor cleaning
reddsAll <- redds
#Read in most recent flow scenario data, cleaning up datasheet, etc.
Files <- list.files('External_data/FlowScen/', pattern = "xlsx$")
MaxFile <- max(Files)
flowsheets <- excel_sheets(paste0('External_data/FlowScen/',MaxFile))
flowsheet <- grep("Alternatives", flowsheets, value = TRUE) #for pulling in flow alternatives
scensheet <- grep("Desired", flowsheets, value = TRUE) #for pulling in desired scenarios sheet
#pull in desired scenarios
scen <- read_excel(paste0('External_data/FlowScen/',MaxFile),
sheet = scensheet, col_names = TRUE) %>%
filter(Use == 'Y') %>%
mutate(Scenario = gsub("[^[:alnum:]]+", "", Scenario)) %>%
mutate(Scenario = tolower(Scenario)) %>%
pull(Scenario)
#pull in flow alternatives
kesFlow <- read_excel(paste0('External_data/FlowScen/',MaxFile),
sheet = flowsheet, skip = 1, col_names = TRUE)
colnames(kesFlow) <- gsub("[^[:alnum:]]+", "", colnames(kesFlow))
kesFlow <- kesFlow %>%
clean_names() %>%
mutate(date = as.Date(as.numeric(date), origin = "1899-12-30")) %>%
filter(!is.na(date)) %>%
select(-contains("actual"), -contains("timeline")) %>%  # Exclude columns with 'Actual' and 'Timeline'
select_if(~ !all(is.na(.))) %>%
gather(key = scenarios, value = flow, -date) %>%
filter(scenarios %in% scen) %>%
spread(key = scenarios, value = flow)
#kesFlow <- kesFlow %>% select(Date, all_of(scenarios)) %>% #selects only scenarios your interested in
# mutate(Date = Date + 365)#temporary to test code
#import fall-run spawn info
spawn <- read.csv('Model_inputs/spawn_timing.csv') %>%
mutate(Date = as.Date(Day, origin = as.Date(paste0(yr,'-01-01')))) %>% #will need to adjust origin for 2024
rename('EmergDays' = 'EmergDate') %>% filter(Run == 'Fall')
#import gard look up table
fall_lookup <- read.csv('Model_inputs/model_dewater_flows.csv') %>%
rename('GardDewater' = 'Dewater', 'GardSpawn' = 'Spawn_Flows') %>% filter(Run == 'Fall')
#read in Redd Count data and date from most recent file
count_pattern <- 'To date, unexpanded redd count' #set pattern for count cell to look for
date_pattern <- 'Through' #set pattern for date cell to look for
CountFiles <- list.files('External_data/ShallowRedds/ReddCount/', pattern = "xlsx$") #read in most recent excel WITH count data
MaxCountFile <- max(CountFiles)
sheetCount <- data.frame(excel_sheets(paste0('External_data/ShallowRedds/ReddCount/',MaxCountFile))) %>%
rename('name' = 1) %>%
filter(grepl('REPORTING', name, ignore.case = TRUE))
#for Count data
Count <- read_excel(paste0('External_data/ShallowRedds/ReddCount/',MaxCountFile),  sheet = sheetCount[1,1])
reddCount <- round(as.numeric(Count[[(which(Count[, 2] == 'To date, unexpanded redd count') + 1), 2]]),0)
countDate <- format(as.Date(as.numeric(Count[[(which(Count[, 1] == 'Through') + 1), 1]]),
origin = "1899-12-30"), "%B %d, %Y")
updatedReddInfoDate <- format(as.Date(gsub(".*?(\\d{4}-\\d{2}-\\d{2}).*", "\\1", MaxReddFile), format = "%Y-%m-%d"), "%B %d, %Y")
flow_date <- Sys.Date()
yr_exp <- 2 #this year's expected expansion number based on the linear relationship between yearly expansions vs recapture rate of tagged female salmon
#show_extra = TRUE
# create a table for population expansions
pop_tab <- data.frame(Name = c("Current Count", "Average Expansion", paste0("Expected ", yr, " Expansion"), "Maximum Expansion", "Minimum Expansion"),
Expansion = c(1, yr_exp, 3.45, 1.25)
)
# create a table for population expansions
pop_tab <- data.frame(Name = c("Current Count", "Average Expansion", paste0("Expected ", yr, " Expansion"), "Maximum Expansion", "Minimum Expansion"),
Expansion = c(1, 1.98, yr_exp, 3.45, 1.25)
)
pop_tab <- pop_tab %>%
mutate(Redds = round(reddCount*Expansion, 0),
"1%" = Redds*0.01) %>%
rename("Expansion Number" = Expansion,
"Total Redds" = Redds)
knitr::kable(pop_tab,
caption = 'Estimated total number of Winter-run redds and resulting number of redds that represent 1% of the population. Estimated total redds are based on current count and expansion numbers representing 1) average 2005-2022 expansion, 2) year-specific expansion determined by the linear relationship between yearly expansions vs recapture rate of tagged female salmon, 3) maximum 2005-2022 expansion, and 4) minimum 2005-2022 expansion.')
# create a table for population expansions
pop_tab <- data.frame(Name = c("Current Count", paste0("Expected ", yr, " Expansion"), "Maximum Expansion", "Minimum Expansion"),
Expansion = c(1, yr_exp, 3.45, 1.25)
)
pop_tab <- pop_tab %>%
mutate(Redds = round(reddCount*Expansion, 0),
"1%" = Redds*0.01) %>%
rename("Expansion Number" = Expansion,
"Total Redds" = Redds)
knitr::kable(pop_tab,
caption = 'Estimated total number of Winter-run redds and resulting number of redds that represent 1% of the population. Estimated total redds are based on current count and expansion numbers representing 1) average 2005-2022 expansion, 2) year-specific expansion determined by the linear relationship between yearly expansions vs recapture rate of tagged female salmon, 3) maximum 2005-2022 expansion, and 4) minimum 2005-2022 expansion.')
#automating expansion row names for table
exp <- vector()
pop_temp <- pop_tab %>% rename('Expansion' = 'Expansion Number') %>% filter(Expansion > 1, !grepl('Expected', Name))
for(i in 1:nrow(pop_temp)){
temp <- pop_temp[i,'Expansion']
temp <- paste0('Winter-run Percent Lost (expansion of ', temp,')')
exp[i] <- temp
}
#creating row names for table
Metric <- c("Avg Sept Flow (cfs)", "Avg Oct Flow (cfs)", "Sept-Feb Total Volume (TAF)", "Aug-Oct Total Volume (TAF)", "Winter-run Redds Dewatered", "Winter-run Percent Lost (current count)", paste0("Winter-run Percent Lost (expansion of ", yr_exp, ")"),exp , "Winter-run Redds Dewatered (250 cfs buffer)", "Winter-run Percent Lost (250 cfs buffer)")
#creating the table using the row names
table <- data.frame(Metric)
#creating a list to store all summary statistics below
tableList <- list()
#summary statistics for flow which are stored in tableList
tableList <- append(tableList, list(avg_sept_flow = colMeans(septKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- append(tableList, list(avg_oct_flow = colMeans(octKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- tableList %>% append(
list(total_volume_sf = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-09-01') & date < paste0(yr+1,'-03-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
tableList <- tableList %>% append(
list(total_volume_ao = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-11-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
#summary statistics for redd dewatering
tableList <- tableList %>% append(
list(wr_dewatered = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#summary statistics for redd dewatering with expansion factors
tableList <- tableList %>% append(
list(wr_pct_lost_300 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*3))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_198 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*1.98))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_345 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*3.45))*100),
after = length(tableList)
)
#summary statsitics for redd dewatering with flow buffer
tableList <- tableList %>% append(
list(wr_pct_lost_125 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*1.25))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_dewatered_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#binding summary statistics into one table
temp_table <- bind_rows(tableList)
#binding to original table with row names
table <- bind_cols(Metric, temp_table) %>% rename('Metric' = 1)
#automating expansion row names for table
exp <- vector()
pop_temp <- pop_tab %>% rename('Expansion' = 'Expansion Number') %>% filter(Expansion > 1, !grepl('Expected', Name))
for(i in 1:nrow(pop_temp)){
temp <- pop_temp[i,'Expansion']
temp <- paste0('Winter-run Percent Lost (expansion of ', temp,')')
exp[i] <- temp
}
#creating row names for table
Metric <- c("Avg Sept Flow (cfs)", "Avg Oct Flow (cfs)", "Sept-Feb Total Volume (TAF)", "Aug-Oct Total Volume (TAF)", "Winter-run Redds Dewatered", "Winter-run Percent Lost (current count)", paste0("Winter-run Percent Lost (expansion of ", yr_exp, ")"),exp , "Winter-run Redds Dewatered (250 cfs buffer)", "Winter-run Percent Lost (250 cfs buffer)")
#creating the table using the row names
table <- data.frame(Metric)
#creating a list to store all summary statistics below
tableList <- list()
#summary statistics for flow which are stored in tableList
tableList <- append(tableList, list(avg_sept_flow = colMeans(septKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- append(tableList, list(avg_oct_flow = colMeans(octKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- tableList %>% append(
list(total_volume_sf = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-09-01') & date < paste0(yr+1,'-03-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
tableList <- tableList %>% append(
list(total_volume_ao = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-11-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
#summary statistics for redd dewatering
tableList <- tableList %>% append(
list(wr_dewatered = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#summary statistics for redd dewatering with expansion factors
tableList <- tableList %>% append(
list(wr_pct_lost_300 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*3))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_345 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*3.45))*100),
after = length(tableList)
)
#summary statsitics for redd dewatering with flow buffer
tableList <- tableList %>% append(
list(wr_pct_lost_125 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*1.25))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_dewatered_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#binding summary statistics into one table
temp_table <- bind_rows(tableList)
#binding to original table with row names
table <- bind_cols(Metric, temp_table) %>% rename('Metric' = 1)
#adding fall-run dewatering to table
table <- rbind(table, setNames(table2, names(table))) %>%
mutate_at(c(2:ncol(table)), as.numeric)
# Separate the data into two parts: the first 5 rows and the remaining rows
table[,2:ncol(table)] <- round(table[,2:ncol(table)], 2)
# Print the modified table
colnames(table) <- gsub("_cfs$", "", colnames(table))
knitr::kable(table,
caption = paste0('Average September and October Keswick (KES) Flow in cfs, total water volume of each alternative for August through October and September through February in TAF, estimated numbers of SRWC redds dewatered, and percent of population that would be lost under each of the proposed alternatives. KES Flow data uses actual flow-to-date as of ',format(max(allflows$Date), '%B %d, %Y'),' and proposed flows for the remainder of the incubation period. Redd dewatering is considered at the actual or estimated dewatering flow and with a 250 cfs buffer applied to the actual/estimated dewatering flow. Percentage of the population lost is based on the ',countDate,' count of ',reddCount,' Winter-run redds and updated redd counts may be available soon. See Scenario Descriptions file for additional information on each scenario.'))
#estimate fall-run redds dewatered
#function for converting flows to nearest number in Gard lookup
round_to_nearest <- function(x, basis_vector) {
nearest_value <- basis_vector[which.min(abs(basis_vector - x))]
return(nearest_value)
}
#transform kesFlowReal dataframe for model
redd_model <- kesFlowReal %>%
gather(key = Scenarios, value = Spawn_Flows, contains('cfs')) %>%
select(date, Scenarios, Spawn_Flows) %>%
mutate(Boards = if_else(date < as.Date(paste0(yr,'-11-01')), 'in', 'out')) %>%
mutate(Spawn_Flows = as.numeric(Spawn_Flows)) %>%
left_join(spawn, by = c('date'= 'Date')) %>%
filter(!is.na(Run)) %>%
mutate(Spawn_Flows = na.approx(Spawn_Flows), EmergDate = date + EmergDays) %>%
mutate(Dewater = sapply(EmergDate, function(edate) {
if (!is.na(edate)) {
min(Spawn_Flows[date <= edate & date >= date], na.rm = TRUE)
} else {
NA
}
})) %>%
mutate(Boards = if_else(month(date) < 11, 'in', 'out'))
redd_model <- redd_model %>%
mutate(GardSpawn = sapply(redd_model$Spawn_Flows, round_to_nearest, fall_lookup$GardSpawn)) %>%
mutate(GardDewater = sapply(redd_model$Dewater, round_to_nearest, fall_lookup$GardDewater)) %>%
left_join(fall_lookup, by = c('GardDewater', 'GardSpawn', 'Boards')) %>%
mutate(Prop_dewater = if_else(is.na(Prop_dewater), 0, Prop_dewater)) %>%
mutate(TotalDewater = Prop * Prop_dewater)
summary <- redd_model %>% group_by(Scenarios) %>%
summarize(Redds_lost = round((sum(TotalDewater)*100), 1)) %>%
rename('Fall-run dewatered (%)' = 'Redds_lost')
table2 <- setDT(as.data.frame(t(summary)), keep.rownames = TRUE, check.names = TRUE)
names(table2) <- table2 %>% slice(1) %>% unlist()
table2 <- table2 %>% slice(-1) %>% select(1,2,4,3,5)
table2 <- table2[, colnames(table)]
table <- rbind(table, setNames(table2, names(table))) %>%
mutate_at(c(2:ncol(table)), as.numeric)
View(table)
table2 <- table2[, colnames(table)]
table2 <- table2[, colnames(table)]
summary <- redd_model %>% group_by(Scenarios) %>%
summarize(Redds_lost = round((sum(TotalDewater)*100), 1)) %>%
rename('Fall-run dewatered (%)' = 'Redds_lost')
table2 <- setDT(as.data.frame(t(summary)), keep.rownames = TRUE, check.names = TRUE)
names(table2) <- table2 %>% slice(1) %>% unlist()
table2 <- table2 %>% slice(-1) %>% select(1,2,4,3,5)
View(table2)
summary <- redd_model %>% group_by(Scenarios) %>%
summarize(Redds_lost = round((sum(TotalDewater)*100), 1)) %>%
rename('Fall-run dewatered (%)' = 'Redds_lost')
table2 <- setDT(as.data.frame(t(summary)), keep.rownames = TRUE, check.names = TRUE)
names(table2) <- table2 %>% slice(1) %>% unlist()
table2 <- table2 %>%
slice(-1) %>%
rename(1 = 'Metric')
summary <- redd_model %>% group_by(Scenarios) %>%
summarize(Redds_lost = round((sum(TotalDewater)*100), 1)) %>%
rename('Fall-run dewatered (%)' = 'Redds_lost')
table2 <- setDT(as.data.frame(t(summary)), keep.rownames = TRUE, check.names = TRUE)
names(table2) <- table2 %>% slice(1) %>% unlist()
table2 <- table2 %>%
slice(-1)
summary <- redd_model %>% group_by(Scenarios) %>%
summarize(Redds_lost = round((sum(TotalDewater)*100), 1)) %>%
rename('Fall-run dewatered (%)' = 'Redds_lost')
table2 <- setDT(as.data.frame(t(summary)), keep.rownames = TRUE, check.names = TRUE)
names(table2) <- table2 %>% slice(1) %>% unlist()
table2 <- table2 %>%
slice(-1) %>%
rename('Metric' = 1)
```{r, echo=FALSE, message = FALSE}
exp <- vector()
pop_temp <- pop_tab %>% rename('Expansion' = 'Expansion Number') %>% filter(Expansion > 1, !grepl('Expected', Name))
for(i in 1:nrow(pop_temp)){
temp <- pop_temp[i,'Expansion']
temp <- paste0('Winter-run Percent Lost (expansion of ', temp,')')
exp[i] <- temp
}
#creating row names for table
Metric <- c("Avg Sept Flow (cfs)", "Avg Oct Flow (cfs)", "Sept-Feb Total Volume (TAF)", "Aug-Oct Total Volume (TAF)", "Winter-run Redds Dewatered", "Winter-run Percent Lost (current count)", paste0("Winter-run Percent Lost (expansion of ", yr_exp, ")"),exp , "Winter-run Redds Dewatered (250 cfs buffer)", "Winter-run Percent Lost (250 cfs buffer)")
#creating the table using the row names
table <- data.frame(Metric)
#creating a list to store all summary statistics below
tableList <- list()
#summary statistics for flow which are stored in tableList
tableList <- append(tableList, list(avg_sept_flow = colMeans(septKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- append(tableList, list(avg_oct_flow = colMeans(octKesFlow[,-1], na.rm = TRUE)), after = length(tableList))
tableList <- tableList %>% append(
list(total_volume_sf = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-09-01') & date < paste0(yr+1,'-03-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
tableList <- tableList %>% append(
list(total_volume_ao = (colSums(filter(kesFlowReal2, date >= paste0(yr,'-08-01') & date < paste0(yr,'-11-01'))[, -1])*1.983/1000)),
after = length(tableList)
)
#summary statistics for redd dewatering
tableList <- tableList %>% append(
list(wr_dewatered = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#summary statistics for redd dewatering with expansion factors
tableList <- tableList %>% append(
list(wr_pct_lost_300 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*3))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_345 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*3.45))*100),
after = length(tableList)
)
#summary statsitics for redd dewatering with flow buffer
tableList <- tableList %>% append(
list(wr_pct_lost_125 = (colSums(filter(dewater, Buffer == 'NO')[, -1:-2], na.rm = TRUE)/(reddCount*1.25))*100),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_dewatered_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE))),
after = length(tableList)
)
tableList <- tableList %>% append(
list(wr_pct_lost_250 = (colSums(filter(dewater, Buffer == 'YES')[, -1:-2], na.rm = TRUE)/reddCount)*100),
after = length(tableList)
)
#binding summary statistics into one table
temp_table <- bind_rows(tableList)
#binding to original table with row names
table <- bind_cols(Metric, temp_table) %>% rename('Metric' = 1)
table <- rbind(table, setNames(table2, names(table))) %>%
mutate_at(c(2:ncol(table)), as.numeric)
table[,2:ncol(table)] <- round(table[,2:ncol(table)], 2)
colnames(table) <- gsub("_cfs$", "", colnames(table))
```{r echo=FALSE, message=FALSE}
worksheetSD <- read_xlsx(paste0('External_data/FlowScen/',MaxFile), sheet = "Scenario Description",range="A1:A1000",col_names=F,col_types="text")
keep=apply(worksheetSD,2,function(x.in) str_detect(x.in,"="))
worksheetSD=worksheetSD[keep,]
worksheetSD=worksheetSD[!is.na(worksheetSD[,1]),]
num.in = dim(worksheetSD)[1]
scenarioDesc=data.frame(matrix(nrow=num.in,ncol=2))
colnames(scenarioDesc)=c("Scenario","Descripion")
View(scenarioDesc)
worksheetSD <- read_xlsx(paste0('External_data/FlowScen/',MaxFile), sheet = "Scenario Description",range="A1:A1000",col_names=F,col_types="text")
# remove extraneous lines, keeping lines with "=" in it
keep=apply(worksheetSD,2,function(x.in) str_detect(x.in,"="))
worksheetSD=worksheetSD[keep,]
worksheetSD=worksheetSD[!is.na(worksheetSD[,1]),]
View(worksheetSD)
num.in = dim(worksheetSD)[1]
scenarioDesc=data.frame(matrix(nrow=num.in,ncol=2))
worksheetSD <- read_xlsx(paste0('External_data/FlowScen/',MaxFile), sheet = "Scenario Description",range="A1:A1000",col_names=F,col_types="text")
# remove extraneous lines, keeping lines with "=" in it
keep=apply(worksheetSD,2,function(x.in) str_detect(x.in,"="))
worksheetSD=worksheetSD[keep,]
worksheetSD=worksheetSD[!is.na(worksheetSD[,1]),]
# split the Alts from the descriptions
num.in = dim(worksheetSD)[1]
View(worksheetSD)
worksheetSD <- read_xlsx(paste0('External_data/FlowScen/',MaxFile), sheet = "Scenario Description",range="A1:A1000",col_names=F,col_types="text")
# remove extraneous lines, keeping lines with "=" in it
keep=apply(worksheetSD,2,function(x.in) str_detect(x.in,"="))
worksheetSD=worksheetSD[keep,]
worksheetSD=worksheetSD[!is.na(worksheetSD[,1]),]
# split the Alts from the descriptions
num.in = dim(worksheetSD)[1]
scenarioDesc=data.frame(matrix(nrow=num.in,ncol=2))
colnames(scenarioDesc)=c("Scenario","Descripion")
# loop through dataframe, split original dataframe column 1 on literal "=" characters and trim leading and trailing space, create new dataframe with 2 columns "Scenario" and "Description"
# populates scenarioDesc dataframe
for(i in 1:num.in){
scenarioDesc[i,]=str_trim(str_split(worksheetSD[i,1],"=")[[1]])
}
scenarioDesc <- scenarioDesc %>%
mutate(Scenario = gsub("[^[:alnum:]]+", "", Scenario)) %>%
mutate(Scenario = tolower(Scenario))
scenarioDesc <- scenarioDesc %>%
mutate(Scenario = gsub("[^[:alnum:]]+", "", Scenario)) %>%
mutate(Scenario = tolower(Scenario)) %>%
filter(Scenario %in% scen)
########Read in redd data from shallow winter redd monitoring
redd_files <- list.files('External_data/ShallowRedds/', pattern = "\\.xlsx$", full.names = TRUE) #list all excel files
MaxReddFile <- max(redd_files) #reads the latest redd excel file
reddsheets <- excel_sheets(MaxReddFile) #list all sheets
reddsheet <- reddsheets[reddsheets == 'SHALLOW REDDS'] #filter sheet with shallow redd nfo
redds <- read_excel(MaxReddFile,  sheet = reddsheet, #read in shallow redd file and clean up.
range = cell_cols(c('A:I'))) %>%
na.omit() %>%
select(3,4,6,9) %>%
rename('Born.on.Date' = 1, 'Estimated.Date.of.Emergence' = 2, 'ACTUAL.or.ESTIMATED..DEWATER.FLOW' = 4) %>%
mutate_at(1:2, as.Date)#minor cleaning
View(redds)
