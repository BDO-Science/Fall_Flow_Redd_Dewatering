mutate(location = 'KES') %>%
select(date = 1, 3,flow = 2,)
rt_flows <- bind_rows(kwk,kes) %>%
mutate(date = mdy(paste0(date,'/',wy))) %>%
filter(!is.na(date)) %>%
filter(date <= Sys.Date()) %>%
filter(date >= as.Date('2025-08-01'))
kes_flow_bind <- rt_flows %>%
filter(location == 'KES') %>%
select(-2) %>%
crossing(scenarios = scen_filter) %>%
select(Date = 1,3,2)
scens_with_rt_flows <- filter(scen_flow_import, Date > max(kes_flow_bind$Date)) %>%
bind_rows(kes_flow_bind) %>%
pivot_wider(names_from = 'scenarios', values_from = 'flow')
#########################################
#pull in 90% exceendance flows
#merge with real-time flow data
#########################################
forecast_90_flows <- read_csv(here::here(project, 'input_data/flow_scen/aug_90.csv'))
View(forecast_90_flows)
View(rt_flows)
View(kes_flow_bind)
forecast_90_flows <- read_csv(here::here(project, 'input_data/flow_scen/aug_90.csv')) %>%
mutate(Date = mdy(date)) %>%
select(3, 2) %>%
filter(Date > max(kes_flow_bind$Date))
scens_with_rt_flows <- filter(scen_flow_import, Date > max(kes_flow_bind$Date)) %>%
bind_rows(kes_flow_bind) %>%
pivot_wider(names_from = 'scenarios', values_from = 'flow')
View(scens_with_rt_flows)
#########################################
#pull in 90% exceendance flows
#merge with real-time flow data
#########################################
forecast_90_flows <- read_csv(here::here(project, 'input_data/flow_scen/aug_90.csv')) %>%
mutate(Date = mdy(date)) %>%
select(3, 2) %>%
filter(Date > max(kes_flow_bind$Date)) %>%
bind_rows(select(kes_flow_bind, Date, flow))
View(forecast_90_flows)
projected_90_cost <- sum(forecast_90_flows$flow) * 1.983 / 1000
library(tidyverse)
library(here)
library(patchwork)
library(ggrepel)
project <- here::here()
source(here::here(project, 'source_code/import_clean.R'))
###############################
#fall flow dewatering estimates
###############################
#import fall-run spawn info
spawn <- read.csv(here::here(project, 'input_data/model_inputs/spawnTimingAll.csv')) %>%
mutate(Date = as.Date(doy, origin = as.Date(paste0(yr,'-01-01')))) %>% #converts Julian Day to date for current year
rename('EmergDays' = 'EmergDate') %>% #renaming for later use
filter(run == 'fall') #filtering just for fall-run
#import gard look up table
fall_lookup <- read.csv(here::here(project,'input_data/model_inputs/model_dewater_flows.csv')) %>%
rename('GardDewater' = 'Dewater', 'GardSpawn' = 'Spawn_Flows') %>%
filter(Run == 'Fall')
#function for converting flows to nearest number in Gard lookup
round_to_nearest <- function(x, basis_vector) {
nearest_value <- basis_vector[which.min(abs(basis_vector - x))]
return(nearest_value)
}
#transform kesFlowReal dataframe for model
redd_model <- scens_with_rt_flows %>%
pivot_longer(names_to = 'Scenarios', values_to = 'Spawn_Flows', -1) %>%
mutate(Boards = if_else(Date < as.Date(paste0(yr,'-11-01')), 'in', 'out')) %>%
mutate(Spawn_Flows = as.numeric(Spawn_Flows)) %>%
left_join(spawn, by = c('Date')) %>%
filter(!is.na(run)) %>%
mutate(Spawn_Flows = zoo::na.approx(Spawn_Flows), EmergDate = Date + incubDays) %>%
mutate(Dewater = sapply(EmergDate, function(edate) {
if (!is.na(edate)) {
min(Spawn_Flows[Date <= edate & Date >= Date], na.rm = TRUE)
} else {
NA
}
}))
redd_model_final <- redd_model %>%
mutate(GardSpawn = sapply(redd_model$Spawn_Flows, round_to_nearest, fall_lookup$GardSpawn)) %>%
mutate(GardDewater = sapply(redd_model$Dewater, round_to_nearest, fall_lookup$GardDewater)) %>%
left_join(fall_lookup, by = c('GardDewater', 'GardSpawn', 'Boards')) %>%
mutate(Prop_dewater = if_else(is.na(Prop_dewater), 0, Prop_dewater)) %>%
mutate(TotalDewater = prop * Prop_dewater)
fall_dewater_summary <- redd_model_final %>%
group_by(Scenarios, year) %>% #summarize total dewatering by Scenario
summarize(Redds_lost = round((sum(TotalDewater)*100), 1)) %>%
pivot_wider(names_from = 'Scenarios', values_from = 'Redds_lost') %>%
filter(year > 2013)
fall_dewater_mean <- fall_dewater_summary %>%
summarize(
year = "Mean",
A1 = mean(A1, na.rm = TRUE),
B1 = mean(B1, na.rm = TRUE)
)
all_dewater_table <- fall_dewater_summary %>%
datawizard::data_transpose(colnames = TRUE) %>%
rownames_to_column(var = 'Scenario')
fall_dewater_for_table <- fall_dewater_mean %>%
select(-1) %>%
mutate(across(everything(), ~ round(.x, 1)))
####various optional graphs
min_year <- min(as.numeric(fall_dewater_summary$year), na.rm = TRUE)
spawn_graph_2 <- ggplot() +
geom_boxplot(spawn, mapping = aes(x = factor(year), y = Date, fill = factor(year)),
color = 'black') +
scale_fill_viridis_d() +
labs(x = 'Spawn Year') +
coord_flip() +
theme_bw() +
theme(legend.position = 'none')
spawn_graph_2
fall_dewater_summary_test <- fall_dewater_summary %>%
mutate(C1 = B1, D1 = B1, E1 = B1, F1 = B1, G1 = B1)
dewater_graph <- fall_dewater_summary_test %>%
pivot_longer(names_to = 'Scenarios', values_to = 'dewater', -1) %>%
ggplot(aes(x = Scenarios, y = dewater, fill = Scenarios)) +
scale_fill_viridis_d(option = 'turbo') +
#geom_tile(width = 0.9, height = 0.9, color = 'black') +
#geom_label(aes(label = dewater), fill = 'white', size = 3) +
geom_col(color = 'black') +
facet_wrap(~year, ncol = 1) +
scale_y_continuous(position = 'right') +
labs(y = 'Redds Dewatered (%)') +
#coord_flip() +
theme_bw() +
theme(legend.position = 'none',
strip.background = element_blank(),
strip.text = element_blank())
dewater_graph
final_graph <- (spawn_graph_2|dewater_graph) + plot_layout(widths = c(4.5,1.5))
final_graph
#ggsave(plot = final_graph, file = 'test_graph.png', height = 9, width = 10)
spawning_cum_half <- spawn %>%
mutate(cum_round = round(cumul_prop, 1)) %>%
filter(cum_round == 0.5) %>%
group_by(year) %>%
slice_head(n = 1)
spawn_graph <-  ggplot() +
geom_line(filter(spawn, year >= min_year),
mapping = aes(x = Date, y = cumul_prop),
color = 'steelblue3',
linewidth = 1) +
geom_point(filter(spawning_cum_half, year >= min_year),
mapping = aes(x = Date, y = 0.50),
size = 2,
shape = 8,
stroke = 2) +
geom_text(filter(spawning_cum_half, year >= min_year),
mapping = aes(x = Date-15, y = 0.50+0.12, label = format(Date, '%b %d'))) +
labs(y = 'Cumulative Spawning Proportion') +
facet_wrap(~year, ncol = 2) +
theme_bw()
spawn_graph
######################
#winter-run dewatering
######################
wr_min_flow <- data.frame()
for(i in 1:nrow(redds)) {
temp <- filter(scens_with_rt_flows, Date <= redds$emergence_date[i]
& Date >= redds$date_established[i]) %>%
summarize(across(-1, min))
wr_min_flow <- bind_rows(wr_min_flow, temp)
}
redds2 <- bind_cols(redds, wr_min_flow) %>%
mutate(dewater_flow_250_buffer = dewater_flow + 250) %>%
pivot_longer(names_to = 'Scenarios', values_to = 'min_flow', 5:(ncol(.)-1)) %>%
mutate(dewater = if_else(dewater_flow > min_flow, 1, 0),
dewater_250_buffer = if_else(dewater_flow_250_buffer > min_flow, 1, 0))
wr_dewater <- redds2 %>% group_by(Scenarios) %>%
summarize(dewater = sum(dewater),
dewater_250_buffer = sum(dewater_250_buffer)) %>%
ungroup() %>%
mutate(dewater_perc = round((dewater/reddCount)*100,1),
dewater_perc_exp = round((dewater/(reddCount*2)*100),1),
dewater_perc_250_buffer = round((dewater_250_buffer/(reddCount)*100),1)) %>%
select(1,2,4,5,3,6) %>%
datawizard::data_transpose(colnames = TRUE,
rownames = NULL)
rownames(wr_dewater) <- NULL
##########################
#volume and flow summaries
##########################
avg_flow_sep_oct <- scens_with_rt_flows %>%
mutate(month = month(Date)) %>%
filter(month %in% c(9,10)) %>%
group_by(month) %>%
summarize(across(-1,mean)) %>%
select(2,3)
sep_feb_volume <- scens_with_rt_flows %>%
filter(Date > paste0(yr,'-08-31')) %>%
summarize(across(-1, ~ sum(.x) * 1.983 / 1000)) %>%
mutate(across(everything(), ~ round(.x, 0)))
aug_sep_volume <- scens_with_rt_flows %>%
filter(Date <= paste0(yr,'-08-31')) %>%
summarize(across(-1, ~ sum(.x) * 1.983 / 1000)) %>%
mutate(across(everything(), ~ round(.x, 0)))
View(aug_sep_volume)
projected_90_cost <- (sum(forecast_90_flows$flow) * 1.983) / 1000
aug_sep_volume <- scens_with_rt_flows %>%
filter(Date <= paste0(yr,'-09-30')) %>%
summarize(across(-1, ~ sum(.x) * 1.983 / 1000)) %>%
mutate(across(everything(), ~ round(.x, 0)))
View(aug_sep_volume)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', .)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', .x)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', ncol(.))
View(eos_scen)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', ncol())
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol())
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume))
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume)) %>%
mutate(eos = (VOl-projected_90_cost) + eosStorage)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume)) %>%
mutate(eos = (VOl-projected_90_cost) + eosStorage)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume))
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume)) %>%
mutate(eos = (VOl-projected_90_cost) + eosStorage)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume)) %>%
mutate(eos = (Vol-projected_90_cost) + eosStorage)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume)) %>%
mutate(eos = (Vol-projected_90_cost))
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume)) %>%
mutate(eos = (Vol-projected_90_cost)+eosStorage)
View(eos_scen)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume)) %>%
mutate(eos = (Vol-projected_90_cost)-eosStorage)
View(eos_scen)
eos_scen <- aug_sep_volume %>%
pivot_longer(names_to = 'Scenario', values_to = 'Vol', 1:ncol(aug_sep_volume)) %>%
mutate(eos = eosStorage - (Vol-projected_90_cost))
library(leaflet)
library(leafpop)
library(readxl)
library(tidyverse)
library(gridExtra)
library(patchwork)
library(leaflet.extras2)
library(leaflet.extras)
library(janitor)
project <- here::here() #pointing to working directory
wy <- 2025
files <- list.files(here::here(project, 'input_data/shallow_redds/'), pattern = "\\.xlsx$", full.names = TRUE)
maxFile <- max(files)
redds <- read_excel(maxFile, sheet = 'SacPAS Shallow Redds') %>%
mutate(Run = case_when(grepl('W', Redd_ID) ~ 'Winter',
grepl('F', Redd_ID) ~ 'Fall',
grepl('S', Redd_ID) ~ 'Spring')) %>%
mutate(Latitude = as.numeric(Latitude),
Longitude = as.numeric(Longitude),
measurement_date = ymd(measurement_date))
redds <- read_excel(maxFile, sheet = 'SacPAS Shallow Redds') %>%
mutate(Run = case_when(grepl('W', Redd_ID) ~ 'Winter',
grepl('F', Redd_ID) ~ 'Fall',
grepl('S', Redd_ID) ~ 'Spring'))
redds <- read_excel(maxFile, sheet = 'SacPAS Shallow Redds') %>%
mutate(Run = case_when(grepl('W', Redd_ID) ~ 'Winter',
grepl('F', Redd_ID) ~ 'Fall',
grepl('S', Redd_ID) ~ 'Spring'))
View(redds)
redds <- read_excel(maxFile, sheet = 'SacPAS Shallow Redds')
files <- list.files(here::here(project, 'input_data/shallow_redds/'), pattern = "\\.xlsx$", full.names = TRUE)
maxFile <- max(files)
redds <- read_excel(maxFile, sheet = 'SacPAS Shallow Redds') %>%
mutate(Run = case_when(grepl('W', Redd_ID) ~ 'Winter',
grepl('F', Redd_ID) ~ 'Fall',
grepl('S', Redd_ID) ~ 'Spring')) %>%
mutate(Latitude = as.numeric(Latitude),
Longitude = as.numeric(Longitude),
measurement_date = ymd(measurement_date))
maxdepth <- max(redds$measurement_depth)
redd_names <- unique(redds$Redd_ID)
redd_list <- list()
min_depth <- if_else(min(redds$measurement_depth) < 0, min(redds$measurement_depth), 0)
for(i in redd_names){
temp <- filter(redds, Redd_ID == i)
redd_list[[i]] <- temp
}
kwk_url <- paste0("https://www.cbr.washington.edu/sacramento/data/php/rpt/mg.php?sc=1&mgconfig=river&outputFormat=csv&hafilter=All&year%5B%5D="
,wy,"&loc%5B%5D=KWK&data%5B%5D=Flow&tempUnit=F&startdate=1%2F1&enddate=12%2F31&avgyear=0&consolidate=1&grid=1&y1min=&y1max=&y2min=&y2max=&size=large")
kes_url <- paste0("https://www.cbr.washington.edu/sacramento/data/php/rpt/mg.php?sc=1&mgconfig=river&outputFormat=csv&hafilter=All&year%5B%5D="
,wy,"&loc%5B%5D=KES&data%5B%5D=ReservoirOutflow&tempUnit=F&startdate=1%2F1&enddate=12%2F31&avgyear=0&consolidate=1&grid=1&y1min=&y1max=&y2min=&y2max=&size=large")
kwk <- read_csv(kwk_url) %>% clean_names() %>%
mutate(gage = 'KWK') %>%
select(3, date = 1, flow = 2) %>%
mutate(date = mdy(paste0(date,'/',wy))) %>%
filter(!is.na(date)) %>%
filter(date <= Sys.Date() &
date >= as.Date('2025-04-01'))
kes <- read_csv(kes_url) %>% clean_names() %>%
mutate(gage = 'KES') %>%
select(3, date = 1, flow = 2) %>%
mutate(date = mdy(paste0(date,'/',wy))) %>%
filter(!is.na(date)) %>%
filter(date <= Sys.Date() &
date >= as.Date('2025-04-01'))
plots <- lapply(redd_list, function(df){
last <- df %>% slice(n())
mid <- median(range(df$measurement_date))
plot <- ggplot(df, aes(x = measurement_date, y = measurement_depth,
fill = measurement_depth)) +
#geom_line(linewidth = 1.5, alpha = 0.5) +
geom_point(size = 5, shape = 21) +
scale_fill_viridis_c(
limits = c(min_depth, max(redds$measurement_depth, na.rm = TRUE)),
direction = -1
) +
#annotate(geom = 'text', x = mid, y = 5, label = text, fontface = 'bold', size = 4) +
scale_y_reverse(limits = c(maxdepth, 0)) +
geom_area(fill = 'steelblue2', alpha = 0.3) +
labs(y = 'Redd Depth (in)', x = 'Date') +
theme_bw() +
theme(legend.position = 'none',
axis.title.y = element_text(margin = margin(r = 8)),
axis.title.x = element_text(margin = margin(t = 8)),
plot.margin = margin(.25, .25, .25, .25, "cm"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
table <- df %>%
slice(n()) %>%
select(3,'Most Recent Depth (in)' = 12, 'Date Measured' = 13, 'Emergence Date (estimate)' = 5,18,7)
t_grob <- tableGrob(table,  rows = NULL)
t_plot <- ggplot() +
annotation_custom(t_grob) +
theme_void()
final_plot <- t_plot/plot + plot_layout(heights = c(0.5,1.5))
})
for(i in redd_names){
temp <- filter(redds, Redd_ID == i)
redd_list[[i]] <- temp
}
kwk_url <- paste0("https://www.cbr.washington.edu/sacramento/data/php/rpt/mg.php?sc=1&mgconfig=river&outputFormat=csv&hafilter=All&year%5B%5D="
,wy,"&loc%5B%5D=KWK&data%5B%5D=Flow&tempUnit=F&startdate=1%2F1&enddate=12%2F31&avgyear=0&consolidate=1&grid=1&y1min=&y1max=&y2min=&y2max=&size=large")
kes_url <- paste0("https://www.cbr.washington.edu/sacramento/data/php/rpt/mg.php?sc=1&mgconfig=river&outputFormat=csv&hafilter=All&year%5B%5D="
,wy,"&loc%5B%5D=KES&data%5B%5D=ReservoirOutflow&tempUnit=F&startdate=1%2F1&enddate=12%2F31&avgyear=0&consolidate=1&grid=1&y1min=&y1max=&y2min=&y2max=&size=large")
kwk <- read_csv(kwk_url) %>% clean_names() %>%
mutate(gage = 'KWK') %>%
select(3, date = 1, flow = 2) %>%
mutate(date = mdy(paste0(date,'/',wy))) %>%
filter(!is.na(date)) %>%
filter(date <= Sys.Date() &
date >= as.Date('2025-04-01'))
kes <- read_csv(kes_url) %>% clean_names() %>%
mutate(gage = 'KES') %>%
select(3, date = 1, flow = 2) %>%
mutate(date = mdy(paste0(date,'/',wy))) %>%
filter(!is.na(date)) %>%
filter(date <= Sys.Date() &
date >= as.Date('2025-04-01'))
plots <- lapply(redd_list, function(df){
last <- df %>% slice(n())
mid <- median(range(df$measurement_date))
plot <- ggplot(df, aes(x = measurement_date, y = measurement_depth,
fill = measurement_depth)) +
#geom_line(linewidth = 1.5, alpha = 0.5) +
geom_point(size = 5, shape = 21) +
scale_fill_viridis_c(
limits = c(min_depth, max(redds$measurement_depth, na.rm = TRUE)),
direction = -1
) +
#annotate(geom = 'text', x = mid, y = 5, label = text, fontface = 'bold', size = 4) +
scale_y_reverse(limits = c(maxdepth, 0)) +
geom_area(fill = 'steelblue2', alpha = 0.3) +
labs(y = 'Redd Depth (in)', x = 'Date') +
theme_bw() +
theme(legend.position = 'none',
axis.title.y = element_text(margin = margin(r = 8)),
axis.title.x = element_text(margin = margin(t = 8)),
plot.margin = margin(.25, .25, .25, .25, "cm"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14))
table <- df %>%
slice(n()) %>%
select(Redd_ID,'Most Recent Depth (in)' = measurement_depth, 'Date Measured' = measurement_date,
'Emergence Date (estimate)' = Estimated_Emergence,Run,Status)
t_grob <- tableGrob(table,  rows = NULL)
t_plot <- ggplot() +
annotation_custom(t_grob) +
theme_void()
final_plot <- t_plot/plot + plot_layout(heights = c(0.5,1.5))
})
kwk_plot <- ggplot() +
geom_line(data = kes, aes(x = date, y = flow, color = "KES"), linetype = 'dashed', linewidth = 1) +
geom_line(data = kwk, aes(x = date, y = flow, color = "KWK"), alpha = 0.8, linewidth = 1) +
#geom_line(data = kes, aes(x = date, y = flow, color = "KES"), linetype = 'dashed', linewidth = 1) +
scale_color_manual(name = "Site", values = c("KWK" = "steelblue3", "KES" = "grey")) +
#scale_linetype_manual(name = "Site", values = c("KWK" = "solid", "KES" = "dashed")) +
labs(x = 'Date', y = 'Flow (cfs)') +
scale_y_continuous(limits = c(0, max(kes$flow)+1000)) +
theme_bw() +
theme(
legend.position = 'bottom',
axis.title.y = element_text(margin = margin(r = 8)),
axis.title.x = element_text(margin = margin(t = 8)),
plot.margin = margin(.25, .25, .25, .25, "cm"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)
)
kwk_plot
kes_plot <- ggplot() +
geom_line(data = kwk, aes(x = date, y = flow, color = "KWK"), linetype = 'dashed', linewidth = 1) +
geom_line(data = kes, aes(x = date, y = flow, color = "KES"), alpha = 0.8, linewidth = 1) +
#geom_line(data = kwk, aes(x = date, y = flow, color = "KWK"), linetype = 'dashed', linewidth = 1) +
scale_color_manual(name = "Site", values = c("KES" = "steelblue3", "KWK" = "grey")) +
#scale_linetype_manual(name = "Site", values = c("KWK" = "solid", "KES" = "dashed")) +
labs(x = 'Date', y = 'Flow (cfs)') +
scale_y_continuous(limits = c(0, max(kes$flow)+1000)) +
theme_bw() +
theme(
legend.position = 'bottom',
axis.title.y = element_text(margin = margin(r = 8)),
axis.title.x = element_text(margin = margin(t = 8)),
plot.margin = margin(.25, .25, .25, .25, "cm"),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)
)
kes_plot
plot_flows <- list(kes_plot, kwk_plot)
for_map <- redds %>% group_by(Redd_ID, lat = Latitude, long = Longitude) %>%
slice(n())
plots_ordered <- plots[as.character(for_map$Redd_ID)]
for_map_flows <- data.frame(gauge = c('KES Gage (Keswick Reservoir Outlfow)', 'KWK Gage(Sacramento River below Keswick)'),
Latitude = c(40.612104, 40.600983),
Longitude = c(-122.445699,-122.444458))
pal <- colorNumeric(
palette = "viridis",
domain = c(min_depth, max(for_map$measurement_depth, na.rm = TRUE)),
reverse = TRUE
)
leaf_icons <- awesomeIcons(
icon = 'tint',
iconColor = 'white',
library = 'fa',
markerColor = 'blue'
)
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "CartoDB (grey canvas)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = 'ESRI (satellite)') %>%
setView(lng = -122.3836, lat = 40.5754, zoom = 11) %>%
addCircleMarkers(data = for_map,
lng = ~Longitude,
lat = ~Latitude,
label = ~paste("Latest Depth (in):", measurement_depth),
fillColor = ~pal(measurement_depth),
group = "CartoDB (grey canvas)",
color = 'black',
weight = 2,# Optional: border color
fillOpacity = 1,
radius = 5,
popup = popupGraph(plots_ordered, width = 625, height = 425),
popupOptions = popupOptions(
autoPan = TRUE
)) %>%
addCircleMarkers(data = for_map,
lng = ~Longitude,
lat = ~Latitude,
label = ~paste("Latest Depth (in):", measurement_depth),
fillColor = ~pal(measurement_depth),
group = "ESRI (satellite)",
color = 'white',
fillOpacity = 2,
weight = 3,# Optional: border color
radius = 6,
popup = popupGraph(plots_ordered, width = 625, height = 425),
popupOptions = popupOptions(
autoPan = TRUE
)) %>%
addAwesomeMarkers(data = for_map_flows,
icon = leaf_icons,
lng = ~Longitude,
lat = ~Latitude,
label = ~gauge,
popup = popupGraph(plot_flows, width = 450, height = 350)) %>%
addLegend(
"bottomright",
pal = pal,
values = c(min_depth, max(for_map$measurement_depth, na.rm = TRUE)),
title = "Water Depth (in)",
opacity = 1
) %>%
addMiniMap(
tiles = providers$CartoDB.Positron,
toggleDisplay = TRUE,
position = "bottomleft",
width = 150,
height = 150,
zoomLevelOffset = -4
) %>%
addLayersControl(
baseGroups = c(
"CartoDB (grey canvas)",
"ESRI (satellite)"
)) %>%
addResetMapButton()
map
htmlwidgets::saveWidget(map, file = 'redd_depth_map.html', selfcontained = TRUE)
